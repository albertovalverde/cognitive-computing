# -*- coding: utf-8 -*-

###########################################################
# Aldebaran Behavior Complementary Development Kit
# Skeleton Library
# Author A. Mazel
# Aldebaran Robotics (c) 2010 All Rights Reserved - This file is confidential.
###########################################################

"skeleton: handle human position, compare between them, fusion them..."

print( "importing abcdk.skeletonlibrary" );

import mutex
import time

import arraytools
import debug
import naoqitools
import numeric
import system
import stringtools
import test
import typetools

"""
    My standard skeleton format, when not specified, is:
    [user_id,time_stamp_last_seen,joint1, joint2, joint3,...]
    refer to SkeletonDetector or OpenNI class below for joint order
"""

class OpenNI():

    def __init__( self ):
        self.jointName = [
            "UserID",
            "TimeStamp",
            
            "Head",
            "Neck",
            "Torso",
            "Waist",
            
            # the openni order is refering LHand as Hand at left, so it's the human right hand.
            "LHand",
            "RHand",
            "LElbow",
            "RElbow",            
            "LShoulder",
            "RShoulder",

            "LHip",
            "RHip",
            "LKnee",
            "RKnee",
            "LFoot",
            "RFoot",

            
            
            "ERROR: END REACHED!",
        ];
        
                
        self.nIdxUserID = 0;
        self.nIdxTimeStamp = 1;
        
        self.nIdxHead = 2;
        self.nIdxNeck = 3;
        self.nIdxTorso = 4;
        self.nIdxWaist = 5;

        self.nIdxLHand = 6;
        self.nIdxRHand = 7;
        self.nIdxLElbow = 8;
        self.nIdxRElbow = 9;
        self.nIdxLShoulder = 10;
        self.nIdxRShoulder = 11;

        self.nIdxLHip = 12;
        self.nIdxRHip = 13;
        self.nIdxLKnee = 14;
        self.nIdxRKnee = 15;
        self.nIdxLFoot = 16;
        self.nIdxRFoot = 17;
        
        self.nIdxJointEnd = 18;

        self.x = 0;
        self.y = 1;
        self.z = 2;
        self.conf = 3;
        
        self.mem = None;
    # __init__ - end
    
    def convertToDict( self, listPose ):
        """
        convert data using SkeletonDetection format to a 'SkeletonLibrary compatible format'        
            [ nUserID, time_stamp_sec, [178.39, 823.41, 2816.56, 0.0], [24.048, 823.41, 2816.563, 0.0],...] 
        or [ nUserID, [178.39, 823.41, 2816.56, 0.0], [24.048, 823.41, 2816.563, 0.0],...] 
        or [    [178.39, 823.41, 2816.56, 0.0], [24.048, 823.41, 2816.563, 0.0],...]
        in mm
        return a dict in the form (in meters)
        {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.11143579245270584, 0.018857764776961917, 0.040522436046048431], 'LKnee': [-0.18079329152546114, 0.2414080166431796, 0.097704274318271875], 'Neck': [-0.0047875990560763979, 0.85805885128820036, 0.0053773368253083459], 'RFoot': [0.017050597903684087, 0.0, 0.06086390933541503], 'Torso': [-0.013592928637508528, 0.71103490803811087, 0.013347800079529928], 'RKnee': [0.023809096470378845, 0.27363544891492969, 0.07714987889371118], 'LHand': [-0.28313713332010304, 0.9907814854610254, 0.022715594093508772], 'RShoulder': [0.097174411150381251, 0.85169474125612443, 0.00069055406044266673], 'LHip': [-0.089672634946910051, 0.56924498863771833, 0.024642500420287237], 'LElbow': [-0.27741691776334892, 0.83849863844873829, -0.038767739270371998], 'RElbow': [0.25369937098667611, 0.81821776607477303, -0.0042047832060746609], 'RHip': [0.04546997530766176, 0.56080537524660068, 0.017890762911319451], 'RHand': [0.2452175436374362, 1.002518369701227, 0.046168226347304782], 'LShoulder': [-0.10674960926253405, 0.86442292232354834, 0.010063963603261795]},
        """
        
        print( "convertToDict: listPose:" + str( listPose ) );

        dictPose = dict();
        
        # print( "skeletonlibrary.OpenNI.convertToDict: Camera3D/Skeleton, value is: " + str( listPose ) );

        if( listPose == None ):
            return dictPose;
        
        nFirstIdx = self.nIdxHead;
        nLastIdx = self.nIdxJointEnd;        
        for i in range( 2 ):
            if( not typetools.isInt( listPose[i] ) ):
                # there's no UserID or no time stamp
                nFirstIdx -= 1;
                nLastIdx -= 1;
        for i in range( nFirstIdx, nLastIdx ):
            if( listPose[i][self.conf] > 0.4 ):
                # mm => metre
                dictPose[self.jointName[i+nFirstIdx]] = [ listPose[i][self.x]/1000., listPose[i][self.y]/1000., listPose[i][self.z]/1000. ];
                
        # print( "skeletonlibrary.OpenNI.convertToDict: Camera3D/Skeleton, dict is: " + str( dictPose ) );
        return dictPose;
    # convertToDict - end
    
    def getSkeleton( self ):
        "return the current skeleton from the Vision3D/OpenNI Naoqi module in a 'SkeletonLibrary compatible format'"
        "return an empty dict on error"
        if( self.mem == None ):
            self.mem = naoqitools.myGetProxy( "ALMemory" );
        return  self.convertToDict( self.mem.getData( "Camera3D/Skeleton" ) );
    # getSkeleton - end
    
    def findNearestUser( self, listSkeletons ):
        """
        takes a standard skeleton list, and find the nearest one
        return the index of best skeleton or -1 if none
        """
        nBestIdx = -1;
        rMinDist = 99999;
        if( listSkeletons != None ):
            for idx, skel in enumerate( listSkeletons ):
                rDist = skel[self.nIdxTorso][2];
                if( rMinDist > rDist and skel[self.nIdxTorso][3] > 0.4 ):
                    rMinDist = rDist;
                    nBestIdx = idx;
#            print( "skeletonlibrary.findNearestUser: nBestIdx: %d" % nBestIdx );
        return nBestIdx;
    # findNearestUser - end
    
    def findDirection( self, skeleton, bUseElbow = False ):
        # find the direction pointed by a skeleton
        # The longitudinal farest arm from the chest is choosen (X axis).
#        print( "findDirection: skeleton: %s" % skeleton );
        posHandL = skeleton[self.nIdxLHand];
        posHandR = skeleton[self.nIdxRHand];
        posChest = skeleton[self.nIdxTorso];
        nSideAxis = 0;
        rDistL = posChest[nSideAxis] - posHandL[nSideAxis];
        rDistR = posChest[nSideAxis] - posHandR[nSideAxis];
        if( abs( rDistL ) > abs( rDistR ) ):
            posEnd = posHandL;
            if( bUseElbow ):
                posBegin = skeleton[self.nIdxLElbow];
            else:
                posBegin = skeleton[self.nIdxLShoulder];
        else:
            posEnd = posHandR;
            if( bUseElbow ):
                posBegin = skeleton[self.nIdxRElbow];
            else:
                posBegin = skeleton[self.nIdxRShoulder];
        vDir = [posEnd[0] - posBegin[0],posEnd[1] - posBegin[1],posEnd[2] - posBegin[2]];
        vDir = numeric.normalise3D( vDir );
#        print( "skeletonlibrary.findDirection: vDir: %s" % vDir );
        return vDir;
    # findDirection - end
    
    def analyseUserPos( self, listSkeletons ):
        """
        analyse a list of skeleton and found the position of each active user
        return a list of user position [x,y,z] defined by their chest or an approximation
        in world space, in mm
        return [] if none
        """
        user = [];
        if( listSkeletons != None ):
            for skel in listSkeletons:
                if( skel[self.nIdxTorso][3] > 0.4 ):
                    vPos = skel[self.nIdxTorso][:3];
                    user.append( vPos );
                elif( skel[self.nIdxHead][3] > 0.4 ):
                    vPos = skel[self.nIdxHead][:3];
                    vPos[1] -= 250; # remove 25cm
                    user.append( vPos );
        return user;
    # analyseUserPos - end

    
    def toNaoRepere(self,v):
        "convert a vector from the openni world to nao world"
        vNao = [0.]*3;
        vNao[0] = v[2];
        vNao[1] = -v[0];
        vNao[2] = v[1];
        return vNao;
    # toNaoRepere - end
    
    def fromNaoRepere(self,v):
        "convert a vector from the nao world to openNI"
        vWorld = [0.]*3;
        vWorld[0] = -v[1];
        vWorld[1] = v[2];
        vWorld[2] = v[0];
        return vWorld;
    # toNaoRepere - end    
        
# class OpenNI - end

openNI = OpenNI();

class Kinect():
    def __init__( self ):
        self.aJointName = [
                "Waist",
                "Torso",
                "Neck",
                "Head",
                "LShoulder",
                "LElbow",
                "WRIST_LEFT",
                "LHand",
                "RShoulder",
                "RElbow",
                "WRIST_RIGHT",
                "RHand",
                "LHip",
                "LKnee",
                "ANKLE_LEFT",
                "LFoot",
                "RHip",
                "RKnee",
                "ANKLE_RIGHT",
                "RFoot",                
        ];
        self.mem = None;
    #__init__ - end
    
    def convertToRawOpenNI( self, aKinect ):
        "take a raw array [0,x,y,z, 1, x,y,z, ... ]"
        "return raw array in OpenNI format"
        # print( "Kinect.convertToRawOpenNI, input has a size of %d: '%s'" % ( len( aKinect ), str( aKinect ) ) );
        nUserID = 1;
        nNumJoint = 0;
        aOpenNI = [[0.,0.,0.,0.]]*20; # alloc raw data (x,y,z,conf)
        aOpenNI.insert( 0, nUserID );
        rConfidence = 1.;
        i = 0;        
        while( i < len( aKinect ) ):
            if( aKinect[i] == None ):
                i += 1;
                continue;
            # print( "i: %d, nIdx: %f" % (i, aKinect[i] ) );
            nIdx = aKinect[i]; i += 1;
            x = aKinect[i]; i += 1;
            y = aKinect[i]; i += 1;
            z = aKinect[i]; i += 1;
            strNameJoint = self.aJointName[nNumJoint];
            # print("looking for %s" % strNameJoint );
            for j in range( len( openNI.jointName ) ):
                if( strNameJoint == openNI.jointName[j] ):
                    # we found the joint
                    aOpenNI[j] = [x,y,z,rConfidence];
                    break;
            # for j - end
            nNumJoint += 1;
        # while - end
        return aOpenNI;
    # convertToRawOpenNI - end
    
    def getSkeleton( self ):
        "return the current skeleton from the skeleton memory variable in a 'SkeletonLibrary compatible format'"
        "return an empty dict on error"
        if( self.mem == None ):
            self.mem = naoqitools.myGetProxy( "ALMemory" );
        return  openNI.convertToDict( self.convertToRawOpenNI( self.mem.getData( "skeleton" ) ) );
    # getSkeleton - end    
    
    def autoTest( self ):
        kinectRawData = [0, -0.263,-0.397,1.143, 1, -0.258,-0.358,1.146, 2, -0.253,-0.161,1.139, 3, -0.334,0.007,1.118, 
        4, -0.435,-0.266,1.225, 5, -0.486,-0.166,1.076,  6, -0.488,-0.338,0.985, 7, -0.488,-0.395,0.958, 8, -0.137,-0.254,1.085, 
        9, -0.022,-0.361,0.961, 10, -0.078,-0.393,0.785, 11, -0.096,-0.404,0.729, 12, -0.347,-0.479,1.183, 13, -0.207,-0.655,0.841, 
        14, -0.109,-0.783,0.578, 15, -0.131,-0.791,0.496, 16, -0.191,-0.468,1.097, 17, 0.058,-0.351,1.457, 18, 0.294,-0.263,1.469, 
        19, 0.249,-0.347,1.452, None,];
        
        convertedData = self.convertToRawOpenNI( kinectRawData );
        print( "convertedData: %s" % str( convertedData ) );
    # autoTest - end
    
# class Kinect - end

kinect = Kinect();
# kinect.autoTest();

"""
            # OpenNI learned position
            'Psi': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.11143579245270584, 0.018857764776961917, 0.040522436046048431], 'LKnee': [-0.18079329152546114, 0.2414080166431796, 0.097704274318271875], 'Neck': [-0.0047875990560763979, 0.85805885128820036, 0.0053773368253083459], 'RFoot': [0.017050597903684087, 0.0, 0.06086390933541503], 'Torso': [-0.013592928637508528, 0.71103490803811087, 0.013347800079529928], 'RKnee': [0.023809096470378845, 0.27363544891492969, 0.07714987889371118], 'LHand': [-0.28313713332010304, 0.9907814854610254, 0.022715594093508772], 'RShoulder': [0.097174411150381251, 0.85169474125612443, 0.00069055406044266673], 'LHip': [-0.089672634946910051, 0.56924498863771833, 0.024642500420287237], 'LElbow': [-0.27741691776334892, 0.83849863844873829, -0.038767739270371998], 'RElbow': [0.25369937098667611, 0.81821776607477303, -0.0042047832060746609], 'RHip': [0.04546997530766176, 0.56080537524660068, 0.017890762911319451], 'RHand': [0.2452175436374362, 1.002518369701227, 0.046168226347304782], 'LShoulder': [-0.10674960926253405, 0.86442292232354834, 0.010063963603261795]},
            'Stop': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.14148706823555249, 0.0060065030306845294, 0.12022814601906161], 'LKnee': [-0.12156908066760033, 0.26035713149628137, 0.064511991237915067], 'Neck': [-0.0060779972291269127, 0.85399971564739918, -0.00043623444424298292], 'RFoot': [0.02758526250146227, 0.0, 0.13970435807004208], 'Torso': [-0.012101663225028321, 0.70306594536127931, 0.0035565863062236654], 'RKnee': [0.010189324639596547, 0.25205344529542029, 0.051906511298222532], 'LHand': [-0.20918780570231943, 0.8020626615997658, 0.18544765152996792], 'RShoulder': [0.098362439200220475, 0.85001695697001978, 0.0065772681843943824], 'LHip': [-0.088572839327271974, 0.55434897060040511, 0.0028273633086187953], 'LElbow': [-0.17850069129215121, 0.68735128483760066, 0.034852485849021286], 'RElbow': [0.13471032143292477, 0.66914931153830204, 0.066300346464114229], 'RHip': [0.050512706199706721, 0.54885541541763927, 0.011810021563339542], 'RHand': [0.13507738902830757, 0.81582040736580197, 0.18880489786857166], 'LShoulder': [-0.1105184336584743, 0.85798251393923941, -0.0074497370728803481]},
            'Init': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.15551798410171658, 0.0010880345663880778, 0.13657797458993037], 'LKnee': [-0.14765196087657298, 0.2860961492637627, 0.20034739438033894], 'Neck': [-0.0014217806108084345, 0.84335772610995108, -0.0041339522480909573], 'RFoot': [0.080501514761961782, 0.0, 0.13319276998646087], 'Torso': [-0.003107274515140764, 0.68101770576976828, -0.0081422048233587459], 'RKnee': [0.10296105922498487, 0.29299302460494447, 0.21978826247794933], 'LHand': [-0.24281045615610741, 0.53011547209680165, 0.15506093623773384], 'RShoulder': [0.11111650679842763, 0.84212712971950743, -0.0009768124981583636], 'LHip': [-0.079806701517099662, 0.51892671619653907, -0.015582160661554994], 'LElbow': [-0.20787782726327114, 0.663697721582719, -0.029185999236604428], 'RElbow': [0.18336630057772454, 0.64097656893375166, 0.011568457693969669], 'RHip': [0.070070102584048027, 0.51736847883978865, -0.012457041966487923], 'RHand': [0.18819622108545586, 0.51559537147574652, 0.17819836259995295], 'LShoulder': [-0.11396007334269324, 0.84458832250039473, -0.0072910919980235514]},
            'Cross': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.26                             , 0.019651831486817962, 0.023863084616015183], 'LKnee': [-0.17073705008922546, 0.28396157353692297, 0.14790004855379066], 'Neck': [-0.011050135335809367, 0.85812696658616405, 0.021645216821050906], 'RFoot': [0.026038428433604266, 0.0, 0.15583890861167687], 'Torso': [-0.020517631883445679, 0.70966683508105965, 0.04275050918423326], 'RKnee': [0.019798616059323905, 0.25580918320858581, 0.069358301752350443], 'LHand': [-0.5177685395082825, 0.94162092416150123, -0.029514083752136051], 'RShoulder': [0.092723473550795465, 0.85260582519374228, 0.029364796610062617], 'LHip': [-0.10217338314300668, 0.56119799384564939, 0.054851122727588013], 'LElbow': [-0.33055663058762697, 0.88733806207318378, -0.0098444386992628651], 'RElbow': [0.29114269691084388, 0.85286120552125966, 0.060116213813238159], 'RHip': [0.035976457323109716, 0.55365048049335697, 0.065305006084988057], 'RHand': [0.45504937747104113, 0.89830885413054029, 0.15883410998379438], 'LShoulder': [-0.11482374422241419, 0.86364806856804155, 0.013925794674216676]},
            'Zero': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.15403088441182003, 0.0024052785497719839, 0.16767479325315207], 'LKnee': [-0.12256523309581452, 0.25537373640883887, 0.10148873651331926], 'Neck': [4.7774915345984421e-05, 0.85552670569259071, 0.025952697236642178], 'RFoot': [0.065712233064967915, 0.0, 0.17234675956468481], 'Torso': [-0.001955375915571861, 0.70587637677828163, 0.051238152666788064], 'RKnee': [0.030884974024177763, 0.25019926903508849, 0.098448973255997926], 'LHand': [-0.18540395612618449, 0.94661667527386306, 0.39678192349446206], 'RShoulder': [0.1052724103035604, 0.85416551489443004, 0.026252167968691696], 'LHip': [-0.074710036986068276, 0.55383391394594683, 0.073791594401043617], 'LElbow': [-0.15420612295056682, 0.87825997315350757, 0.21325181870557716], 'RElbow': [0.13267240015403398, 0.8741613157766428, 0.21448186170175715], 'RHip': [0.065373756309871009, 0.55076476681463082, 0.074167644304871869], 'RHand': [0.1287221447740387, 0.93164039232894813, 0.40429870255220784], 'LShoulder': [-0.10517685549761038, 0.85688789649075148, 0.025653385712849999]},
#            'Right': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.3332                     , 0.04, 0.0885                                                                ], 'LKnee': [-0.21440582655402157, 0.29076319884714902, 0.1376204597280499], 'LShoulder': [-0.12814535274449343, 0.87855639324286694, 0.0016875051820205761], 'RFoot': [-0.033207238958351905, 0.0, 0.08851893017649666], 'RKnee': [-0.016012472761198836, 0.26068105144350134, 0.057943228749280158], 'LHand': [-0.55577064169746249, 0.88865251590673622, 0.0015768516558362518], 'RShoulder': [0.074290166772839325, 0.8418505487173743, 0.0048402747086619888], 'LHip': [-0.14559486230697741, 0.57783832617165609, 0.009326644890540357], 'LElbow': [-0.34315210887373193, 0.87459099729291834, -0.0088939911594680329], 'RHip': [-0.010785324105306518, 0.55350946179081995, 0.010584920219935944], 'Torso': [-0.053472499466672568, 0.71427928895538129, 0.0078098667383709819], 'Neck': [-0.026927592985827049, 0.86020347098012062, 0.0032638899453412821]},            'Stand': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.15557101159484527, 0.0069006572101810437, 0.12502818957626688], 'LKnee': [-0.11758847690820028, 0.25445229337830677, 0.072287117269233564], 'Neck': [-0.0032054971909805281, 0.8527975607792706, 0.0051749959998926677], 'RFoot': [0.0644469168365263, 0.0, 0.13807627136330614], 'Torso': [-0.006873906181830469, 0.70136985538990859, 0.011915291143215769], 'RKnee': [0.037671664233475087, 0.24750570201635225, 0.068905759458887342], 'LHand': [-0.21896566665639725, 0.52163763897267301, 0.12683105037352554], 'RShoulder': [0.10161420480350777, 0.85058914375839156, 0.01262368282179994], 'LHip': [-0.080355527552043629, 0.54982224616213304, 0.014425748566669614], 'LElbow': [-0.18627364908176419, 0.67466959113437086, 0.0071251004995910453], 'RElbow': [0.1597951646901333, 0.64494021702942583, 0.048503443073752039], 'RHip': [0.059177071086627918, 0.54676940399891472, 0.024848726375763623], 'RHand': [0.1579805569938274, 0.47948130782142728, 0.15384136518445712], 'LShoulder': [-0.10802519918546882, 0.85500597780014964, -0.0022735318115368066]},
            'Right': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.14988115155002713, 0.021193651811031732, 0.11993390048539898], 'LKnee': [-0.13995379280688303, 0.29900800460543603, 0.085625907619370362], 'Neck': [-0.024840507331870883, 0.86480865925913664, 0.01614392791911038], 'RFoot': [-0.011486114535319763, 0.0, 0.11708581816168304], 'Torso': [-0.049170835232544667, 0.7219830302921566, 0.031097674808515417], 'RKnee': [-0.02890971906546274, 0.27569306197927645, 0.07137683451441465], 'LHand': [-0.53933897034337996, 0.95210236701409023, -0.016399287097803493], 'RShoulder': [0.073032674355334073, 0.84967244114558671, 0.030906194091845474], 'LHip': [-0.1397650574720555, 0.58668917032318013, 0.039779113537083459], 'LElbow': [-0.33565700341881238, 0.91131426764889989, -0.0014289905826442683], 'RElbow': [0.086612173962705805, 0.64735227061638689, 0.055538533328858233], 'RHip': [-0.0082429509807818626, 0.56597198122259351, 0.058508031131238071], 'RHand': [0.074111686754097156, 0.4519627972146516, 0.11588914101719568], 'LShoulder': [-0.12271369385249457, 0.87994487737268656, 0.0013815070769757122]},
            
            'Left': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.10786089601257823, 0.0057827987194262387, 0.055104294455089728], 'LKnee': [-0.13435642720809526, 0.28390527320371378, 0.1047342269136068], 'Neck': [-0.0027263289921280413, 0.85874042504155335, 0.011338090270680903], 'RFoot': [0.0082769230427376262, 0.0, 0.10113730583875161], 'Torso': [-0.0063587663879911766, 0.71051108456167777, 0.022128229760721013], 'RKnee': [0.031920009048828628, 0.26565745185968204, 0.063477774526128419], 'LHand': [-0.21613948462141594, 0.5142632882449939, 0.092744957798316929], 'RShoulder': [0.099995369745733448, 0.85563917799742151, 0.0033533527426523194], 'LHip': [-0.079500798165783884, 0.56348342712026567, 0.034610716952040155], 'LElbow': [-0.19795510877364866, 0.69055085855303178, 0.0057842021221085858], 'RElbow': [0.27573335197000115, 0.90143314312419032, 0.02275944910051439], 'RHip': [0.057294163026038694, 0.55907970543669228, 0.024349348405982098], 'RHand': [0.45892055664875858, 0.90649884205634512, 0.097404878438234241], 'LShoulder': [-0.10544802772998954, 0.86184167208568518, 0.019322671865078113]},
            'Go': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.14353892889338715, 0.0098995169778204797, 0.18154982283183069], 'LKnee': [-0.10787003540374483, 0.28949198127906706, 0.15375085533075039], 'Neck': [-0.0079400056853196448, 0.85873526568083081, 0.020454651671743661], 'RFoot': [0.038375535197937551, 0.0, 0.18410847868586416], 'Torso': [-0.015548834841842803, 0.71356463738556575, 0.044115735896533358], 'RKnee': [0.029955481315399712, 0.27872341177093485, 0.13534573683900808], 'LHand': [-0.35477151387797917, 0.79815384028950587, 0.26746516686383071], 'RShoulder': [0.095684350046060157, 0.85243958884501192, 0.015152881977476561], 'LHip': [-0.089992118564795762, 0.57184770054798617, 0.071782725882234749], 'LElbow': [-0.2461460612533268, 0.71847775270550029, 0.10698889261703805], 'RElbow': [0.20071142600967845, 0.686717868249486, 0.093482158425498924], 'RHip': [0.045567053088421364, 0.56415488159210225, 0.064783104269534736], 'RHand': [0.32570253693584855, 0.75821604672687226, 0.22134616755151121], 'LShoulder': [-0.11156436748184261, 0.86503094251664969, 0.02575657663367591]},
            
#            'Home': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.13496314327027345, 0.0011214651151928872, 0.19352331592622155], 'LKnee': [-0.13724264990783905, 0.26347181616998411, 0.30880209298172051], 'Neck': [-0.0012428161334240861, 0.84810996130761673, 0.033931885382101935], 'RFoot': [0.053232874435265962, 0.0, 0.22111405165526746], 'Torso': [-0.0027722740971995907, 0.68593317845184631, 0.070977318975920953], 'RKnee': [0.082362115199359626, 0.27736822697432351, 0.32077584534522008], 'LHand': [-0.083487717436381656, 1.1369959463872852, 0.037352957485958946], 'RShoulder': [0.11385500856361327, 0.84861406083900148, 0.040889832102100732], 'LHip': [-0.080695075470832545, 0.52502211639936758, 0.10390266711378332], 'LElbow': [-0.24977613008470551, 0.99504904901122671, 0.06451441924952625], 'RElbow': [0.23379411515947598, 0.98927042493049666, 0.083244338577857679], 'RHip': [0.072590414517016935, 0.52605550513248278, 0.11309112415726121], 'RHand': [0.077704179989640743, 1.1352758767448439, 0.042779057378045701], 'LShoulder': [-0.11634062716419065, 0.84760590550829873, 0.026973763733836847]},
#            'Egyptian': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.17575047514165368, 0.0015915736376677792, 0.17884930765296569], 'LKnee': [-0.13508008154265672, 0.27531524296462762, 0.079756678090694533], 'Neck': [-0.012140886498468064, 0.86016600763922524, 0.01755176999764534], 'RFoot': [0.059957149249311933, 0.0, 0.189699418867387], 'Torso': [-0.023989794363200791, 0.71363684187064635, 0.039322628322626799], 'RKnee': [0.021814429499300497, 0.26487667960967887, 0.095919171281538707], 'LHand': [-0.24493529294811922, 0.56036278799413242, 0.082560860657763177], 'RShoulder': [0.090482150938048997, 0.85257030469270434, 0.022278124074686365], 'LHip': [-0.10418670271636823, 0.57006147159184828, 0.057100683226486773], 'LElbow': [-0.27249385071158044, 0.72569866343835621, -0.035121824065751393], 'RElbow': [0.23504591587194446, 0.78797104287688757, 0.044584846310862562], 'RHip': [0.032490236482182348, 0.56013834907580085, 0.063516360394812468], 'RHand': [0.23157877947656846, 0.99910560421996342, 0.059054109557759513], 'LShoulder': [-0.11476392698721377, 0.86776171058574625, 0.012825572194710817]},
            'Taichi-2': {'Head': [0.0, 1.0, 0.0], 'Neck': [-0.0085829884574086922, 0.86889068002057246, -0.12879873279510276], 'RFoot': [-0.049601416157087769, 0.0, -0.16335578438773538], 'Torso': [-0.017396957536539914, 0.72983741391630108, -0.26494715976604993], 'RKnee': [-0.0086010083130234945, 0.23037272205339962, -0.25152845503557597], 'LHand': [-0.64759225794795339, 0.91723510402558583, -0.32393788090390002], 'RShoulder': [0.12566234331815559, 0.85533593338191882, -0.12364127728116521], 'LHip': [-0.11560230812473744, 0.59980998302305555, -0.40452999838019743], 'LElbow': [-0.38046842765102867, 0.90716254885333292, -0.26137693666397793], 'RElbow': [0.35476636511435844, 0.84245983434996474, -0.22236524873597274], 'RHip': [0.06206531179202452, 0.58328544895442846, -0.40070740768034285], 'RHand': [0.61871941777648065, 0.79917914980695259, -0.23605701029099552], 'LShoulder': [-0.1428283298350275, 0.88244540105374736, -0.133956290730955]},
            'MartialSalute': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.14484514280785513, 0.0010122880653444472, 0.23470860640924951], 'LKnee': [-0.15615755019057861, 0.26917520532635092, 0.27313123525173144], 'Neck': [-0.007541835299825851, 0.84996683832592967, 0.031729559296365159], 'RFoot': [0.068036600289161975, 0.0, 0.26466563020663164], 'Torso': [-0.015428365722780314, 0.69257005823644202, 0.068349030085893714], 'RKnee': [0.07881229424939909, 0.2565369583178555, 0.28020589584537858], 'LHand': [0.19405867055924694, 0.71178609363475343, 0.15597291639251684], 'RShoulder': [0.10427257675436824, 0.84614114564588538, 0.039364612627669465], 'LHip': [-0.096590826686466985, 0.53599314386535402, 0.10002721154170864], 'LElbow': [0.0041131619054407854, 0.77745635201510443, 0.18065656627090701], 'RElbow': [-0.052473374380456822, 0.77483552923981802, 0.16942676535408477], 'RHip': [0.052285623833737908, 0.53082204183364112, 0.11058705902777985], 'RHand': [-0.24389847207065712, 0.72640004828156013, 0.11469337338990226], 'LShoulder': [-0.11935624735401995, 0.85379248847464895, 0.024094335839761023]}, # seen as elbow/hand inverted (whatever)
            'Taichi-1': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.43385470671508863, 0.22461752598556012, -0.08826070837592348], 'LKnee': [-0.30163395359140088, 0.24020973881545904, 0.049448743193047304], 'Neck': [-0.052490640761979776, 0.85186568183241906, -0.0023809128226525496], 'RFoot': [-0.18171838630468362, 0.0, 0.11740540998348239], 'Torso': [-0.1080865683980466, 0.6947358031519214, -0.0067759046467034774], 'RKnee': [-0.093688362832667266, 0.21045909068611646, 0.07650492939522964], 'LHand': [0.10957970216583195, 0.78691643426478641, 0.44391723285605339], 'RShoulder': [0.038776719677105574, 0.82138151949249627, -0.06640498778265394], 'LHip': [-0.22297552762938597, 0.56082624671441961, 0.033673135371368172], 'LElbow': [-0.040087247531598098, 0.82082285192341609, 0.27045165405974964], 'RElbow': [0.18130272825202151, 0.79008671051984969, 0.093761549862373755], 'RHip': [-0.10120603413579839, 0.51872496401911694, -0.050551173515334578], 'RHand': [0.30375381294780479, 0.76811582830511338, 0.28273085510375306], 'LShoulder': [-0.14375797928221826, 0.88234980033464816, 0.061643162137348842]},
            'Sit': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.16690440384057381, 0.0080816741705730354, 0.061027373290248516], 'LKnee': [-0.19198427541715782, 0.3191281178130847, 0.17492671917084887], 'Neck': [-0.0074220870475599282, 0.80216030522670834, -0.04163387085476028], 'RFoot': [0.074298057322797678, 0.0, 0.086209390923691495], 'Torso': [-0.013909425021509421, 0.5945115252449491, -0.091272657185816827], 'RKnee': [0.09904545060848953, 0.3245375281650924, 0.20124860622186211], 'LHand': [-0.21407585718671523, 0.51692039991448169, 0.23747601466276361], 'RShoulder': [0.13902208890054962, 0.79287521251475546, -0.021939847181693922], 'LHip': [-0.12071884629492605, 0.39168849895621932, -0.15579533055019895], 'LElbow': [-0.26444349314948307, 0.56546823154453851, -0.027163481279118787], 'RElbow': [0.21426478492755724, 0.54450632073033622, 0.022444084983160955], 'RHip': [0.074196774590682302, 0.3786965986268504, -0.12902580611017736], 'RHand': [0.10227383593994235, 0.53274576012795738, 0.27064902227419951], 'LShoulder': [-0.15386626650511967, 0.81144539793866122, -0.061327894527826644]},
            'Nest': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.15925298620388317, 0.0, 0.14389443189760734], 'LKnee': [-0.11349104433003682, 0.27441380035284546, 0.089952219168969685], 'Neck': [-0.0060442731642112082, 0.86097923640097618, 0.01961155619915295], 'RFoot': [0.054823973410293075, 0.0065475662840382533, 0.2027722452283886], 'Torso': [-0.012327273982392242, 0.71375671783109074, 0.043019848930677396], 'RKnee': [0.013541925698493622, 0.2695534873103495, 0.061831893998881372], 'LHand': [-0.078935834172040795, 0.58598745351154979, 0.18636579360030248], 'RShoulder': [0.097106067012399794, 0.85762481183012895, 0.026173948582460176], 'LHip': [-0.086055509425555329, 0.56968836363008801, 0.060972921580917161], 'LElbow': [-0.20431836126104996, 0.70367118535840334, 0.052192733014899052], 'RElbow': [0.16036169798843564, 0.67982277712450545, 0.096875458412791549], 'RHip': [0.051365099362320844, 0.56545638498908435, 0.068974308487981056], 'RHand': [0.019300698395565034, 0.58875386439531874, 0.19349895158298028], 'LShoulder': [-0.10919461334082221, 0.86433362174933848, 0.013049163815845727]},
#            'EgyptianMirror': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.18879935008807336, 0.0, 0.10958275926821831], 'LKnee': [-0.15515603790685667, 0.28257752639420491, 0.077429526834610823], 'Neck': [-0.018482433255092898, 0.86224191345397716, 0.020160785739243688], 'RFoot': [0.037695933246244061, 0.012202273791197803, 0.18133712679633374], 'Torso': [-0.037403813911908487, 0.71622087185645023, 0.042405042177634869], 'RKnee': [0.00066079482300679133, 0.26540140287757952, 0.059829735823808822], 'LHand': [-0.25498795500843457, 1.0419308854053528, -0.013797766302653133], 'RShoulder': [0.083876590656973768, 0.84971238926618697, 0.024998359441060394], 'LHip': [-0.12296609478570071, 0.57844043807857115, 0.065217816892948949], 'LElbow': [-0.29180976203829623, 0.83421216131071807, 0.012928387527116208], 'RElbow': [0.17100691086432163, 0.67752721252669723, 0.047687093805045842], 'RHip': [0.013437088049385601, 0.56227110483148135, 0.071160320744542815], 'RHand': [0.13616459089628394, 0.49729111025354816, 0.102223971455684], 'LShoulder': [-0.12084144737862174, 0.87477143764176735, 0.015323212037426983]},

            'Y': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.073275652814084977, 0.0, 0.13766045828492879], 'LKnee': [-0.067742118177679472, 0.27648631021419218, 0.055192315080337437], 'Neck': [0.0070401993585945885, 0.86393784473907731, 0.028754522835155637], 'RFoot': [0.078642033277552412, 0.0080690116635992078, 0.13217574054110551], 'Torso': [0.012654596466593119, 0.71864632941684803, 0.057787768813462204], 'RKnee': [0.048091237384550373, 0.28491834632874802, 0.0657864386570335], 'LHand': [-0.41750690761338799, 1.1434216438786129, -0.016269063644221107], 'RShoulder': [0.11111625410871664, 0.86980996743200956, 0.038030310830742729], 'LHip': [-0.050911790288364914, 0.57139477952486106, 0.081049952568849046], 'LElbow': [-0.27016849976646051, 0.98922763048465945, 0.028357280141178248], 'RElbow': [0.23962236999750675, 1.0186459483500507, 0.071303041581853382], 'RHip': [0.08537717505539856, 0.57796558624638161, 0.091969304991710632], 'RHand': [0.33360903483712662, 1.2025675658650627, 0.096065850831168906], 'LShoulder': [-0.09703586025207335, 0.85806576093051223, 0.019478734839568544]},
            'M': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.079478790611518302, 0.0, 0.12303887721577696], 'LKnee': [-0.074708403135058402, 0.26644748427698711, 0.045524941540506764], 'Neck': [0.0035540959517710207, 0.85955805157462595, 0.019104249970932605], 'RFoot': [0.073026592073160673, 0.0074013523232249008, 0.12232885662307356], 'Torso': [0.0072252415518997007, 0.71243259163015837, 0.040344022216733125], 'RKnee': [0.042012052837482786, 0.27171993517766291, 0.054067342668364569], 'LHand': [-0.13047242696809858, 1.0752275866792429, 0.018152251364763408], 'RShoulder': [0.1084918749563404, 0.86231989282761023, 0.020009288304984968], 'LHip': [-0.057934433562974522, 0.56276788368268227, 0.063423513827323419], 'LElbow': [-0.25182530267826053, 0.93655893457595518, 0.021555857000978951], 'RElbow': [0.24265828897752315, 0.95546785477715268, 0.029570618127842944], 'RHip': [0.079294930322696244, 0.56661259994805513, 0.065934406250739847], 'RHand': [0.10421845119016013, 1.0814239243786725, 0.028778534069579913], 'LShoulder': [-0.10138367817735483, 0.85679621032164155, 0.018199211636880243]},
            'C': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.14293087730976303, 0.0, 0.17812786247641596], 'LKnee': [-0.19135116298578925, 0.32641305355081851, 0.10513549541560725], 'Neck': [-0.060310597608680835, 0.87328125125513156, 0.039514296264637268], 'RFoot': [0.022502237395000606, 0.0046886954804993648, 0.18252174436564439], 'Torso': [-0.12184183787041236, 0.73371776004277112, 0.080262172095446394], 'RKnee': [-0.0513857139379005, 0.2605120506297624, 0.10554326567499435], 'LHand': [0.17333658263181914, 1.1686654641695071, 0.17952723328127446], 'RShoulder': [0.014086458391906141, 0.82154958164212333, -0.025331775017148461], 'LHip': [-0.2325045938334106, 0.63390226283509477, 0.16424959548014326], 'LElbow': [-0.026936459472613267, 1.1199452822662088, 0.19297454243232973], 'RElbow': [0.031619358056655056, 0.63145847761739604, 0.055646727854841073], 'RHip': [-0.13618685595962776, 0.56368808945638116, 0.080348628665470795], 'RHand': [0.20947735429976927, 0.53693212049561478, 0.083694928552008968], 'LShoulder': [-0.13470764843346741, 0.9250128794617366, 0.104360367546423]},
            'A': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.062756524496760863, 0.0, 0.1253985744693783], 'LKnee': [-0.058344607742099444, 0.25557888129259532, 0.057882696837133457], 'Neck': [0.0097281423926088816, 0.85989322062027873, 0.021766063200644711], 'RFoot': [0.092382008769661822, 0.0039570866973674635, 0.13133644834207192], 'Torso': [0.019265771109527399, 0.71184715273357924, 0.044372341065428728], 'RKnee': [0.061120819160484466, 0.26725440687552571, 0.063145060794317781], 'LHand': [0.011327570071163159, 1.1466278513525472, 0.025970443213235335], 'RShoulder': [0.11529791502841079, 0.867443461079764, 0.02673003757976607], 'LHip': [-0.039907162336960407, 0.55525567774744367, 0.057835773304540969], 'LElbow': [-0.17753778859940814, 1.0351706048317382, 0.02114613720126007], 'RElbow': [0.2093011525159674, 0.99453706943328657, 0.055037997039093602], 'RHip': [0.098142197159772113, 0.56520387015219287, 0.064708338752633932], 'RHand': [0.065452792210000763, 1.1119819870320991, 0.030503602877010903], 'LShoulder': [-0.095841635163865485, 0.85234298016079335, 0.016801931360004584]},
            
            'Other': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.086760441095934934, 0.0, 0.15682519076375434], 'LKnee': [-0.074917960853580184, 0.23510824228121308, 0.11182461127401394], 'Neck': [0.0084314320816683257, 0.85365630939564641, 0.01349488784985667], 'RFoot': [0.087104631120306336, 0.0079793931478375178, 0.13167353025478176], 'Torso': [0.018652020781684053, 0.69905967119128321, 0.030601162328373361], 'RKnee': [0.059145159163505739, 0.24180760743624874, 0.082351894406134649], 'LHand': [-0.21886356121315931, 0.94516566019312609, 0.36458194822152462], 'RShoulder': [0.11249717283289716, 0.85660386836488356, -0.022060337194081129], 'LHip': [-0.039103406968749907, 0.54205109162405862, 0.070805109884716014], 'LElbow': [-0.21792055657362983, 0.8282966153530964, 0.20205099969367482], 'RElbow': [0.15029074368971787, 0.63714552218592069, 0.035473800989761911], 'RHip': [0.096850790810606005, 0.54566158562510858, 0.023840831733580495], 'RHand': [0.077835865605002066, 0.46180226121246981, 0.12514056319836311], 'LShoulder': [-0.095634308669560505, 0.85070870938605936, 0.049050277055194019]},
            'Up': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.088847609799068542, 0.0, 0.15661551405100135], 'LKnee': [-0.084105905400968184, 0.24115840883528078, 0.1121078760427274], 'Neck': [-0.0048496784288804603, 0.85562270831573017, 0.015736502803931008], 'RFoot': [0.086700603942904311, 0.0031431045988318937, 0.13031308540354006], 'Torso': [-0.008344868457826839, 0.70085166920714337, 0.036855684331364824], 'RKnee': [0.05081006156504609, 0.2347290638570286, 0.086600870143780803], 'LHand': [-0.2170906564524886, 0.99846226221751, 0.064146056334656101], 'RShoulder': [0.10539188155819598, 0.85325055002067951, 0.016598073658548908], 'LHip': [-0.08366477404786013, 0.54900166752464485, 0.058453699164172604], 'LElbow': [-0.22454114225026806, 1.0345673218647546, -0.1337514705406859], 'RElbow': [0.24612859004653651, 0.80214978053884878, 0.069778518205085946], 'RHip': [0.060522418963016543, 0.54582559171496614, 0.05888135818845678], 'RHand': [0.12185396696938749, 0.95533336794316326, 0.023109877516579603], 'LShoulder': [-0.11509124355806713, 0.85799486661078084, 0.014874931949313108]},
            'Down': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.082810425093567744, 0.0, 0.14707247343661575], 'LKnee': [-0.0729033523920537, 0.24820465387926111, 0.10188365485123752], 'Neck': [-0.0036122425041435762, 0.85487722204946714, 0.010765254765545565], 'RFoot': [0.089123511667484279, 0.0065359253518858032, 0.1214263066545867], 'Torso': [-0.0061754560988617922, 0.70101256197546014, 0.026191597668152631], 'RKnee': [0.056187669441676628, 0.24205377210543774, 0.080633517648407649], 'LHand': [-0.16994128838904635, 0.4501721119135228, 0.1442707051034158], 'RShoulder': [0.10553555635518418, 0.85299322100927111, 0.010150260262822584], 'LHip': [-0.081230520507317522, 0.55173450850229899, 0.042868293632587214], 'LElbow': [-0.16820344018150077, 0.64657880798181411, 0.041229557287450667], 'RElbow': [0.25865277919477669, 0.78179648854430195, 0.041957775943655101], 'RHip': [0.061504783109562901, 0.54894013232156558, 0.042254928254374761], 'RHand': [0.13740524859116368, 0.94571683820329555, 0.016869421394029624], 'LShoulder': [-0.11276003627245723, 0.85676118236155041, 0.011380249268268545]},

#            'Sleep': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.11959059029868346, 0.0, 0.037120751446841939], 'LKnee': [-0.11597184018073414, 0.26743500477859283, 0.013979140590365421], 'LShoulder': [-0.1421657848691846, 0.81810199267525896, 0.057010761316211002], 'RFoot': [0.02722012581397083, 0.028136581627104841, 0.072976307544948937], 'Torso': [-0.035160022379690674, 0.69257399218258764, 0.010510716768906716], 'RKnee': [0.0050516061425819984, 0.28353360896676616, -0.016743409269895451], 'RHip': [0.039660783169045914, 0.5635998229823973, -0.028795911391685594], 'RShoulder': [0.048999447478097945, 0.84357396700770659, 0.011284723863625704], 'LHip': [-0.085894827661254655, 0.54807932341784127, 0.0017924218713879468], 'RElbow': [0.10560865739133582, 0.73360734281948059, 0.036917127813761053], 'RHand': [0.041331710285763081, 0.92053609964863059, 0.043930946079816832], 'Neck': [-0.046583166378267829, 0.8308379613032788, 0.034147816742734483]},
#            'Sleep3': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.16775553778746402, 0.010855194158416587, 0.13080713655900744], 'LKnee': [-0.15659865890473529, 0.29425351047033615, 0.10360526983473047], 'Neck': [-0.024332030251547596, 0.86329646965285611, 0.019504863380702727], 'RFoot': [-0.0017498444143756264, 0.0, 0.15954246917053735], 'RKnee': [-0.02088003193762215, 0.27274807229505849, 0.079470177880158865], 'RHip': [-0.027751192483351995, 0.56035860661850601, 0.0084017978933723873], 'RShoulder': [0.048316681555464612, 0.84200838499837971, -0.049150352821187862], 'LHip': [-0.12487784075899967, 0.5888684337256046, 0.10038337432205327], 'Torso': [-0.050722564856033665, 0.71848169842141096, 0.036483362515292266], 'LShoulder': [-0.096980746964959827, 0.88458453468173248, 0.088160079582593323]},
            
"""



class SkeletonLibrary():
    "The class to store Human position, compare position between them..."
    "A position is a dictionnary of ['joint']: values"
    "   each values is a pair [x,y,z]: the relative position as a ratio of the total bouding box, relative to the lower point"
    "The joint name for head is Head and for foot is LFoot and RFoot, other joint could have virtually any name"
    def __init__( self ):
        # list of known pose
        if( False ):
            # no known poses
            self.listPoses = dict();
        else:
            # pre initialised poses
            self.listPoses = {
            
            # original: (no more needed: no bugs...)
            
            
            # normalised recorded position
            
            
            'A': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.12328766223627963, 0.011316255851390393, -0.051220943801021164], 'LKnee': [-0.089934479621637239, 0.28171531515591675, -0.083382885536434345], 'Neck': [-0.010125068222289894, 0.87849911033234962, -0.030970842856527184], 'RFoot': [0.076831468951660459, 0.0, -0.033948732054085377], 'Torso': [-0.01548540367822069, 0.69505658820177363, -0.03692676325198678], 'RKnee': [0.050625376611535274, 0.27575939476045713, -0.05539007387780856], 'LShoulder': [-0.11256699132441803, 0.86063131364588508, -0.040500343889331179], 'LHand': [-0.01667659130732119, 1.103037508041657, 0.067302056669070964], 'RShoulder': [0.10899344618715943, 0.86301368890408603, -0.041691442768217173], 'LHip': [-0.071471097995643856, 0.60988684134649551, -0.029779601977297978], 'LElbow': [-0.16557473431913286, 0.99583083442312681, 0.013698631109591393], 'RElbow': [0.20011911343789718, 0.96366885718762785, -0.0023823397581151954], 'RHip': [0.03394878530421408, 0.60690888114876573, -0.027992811658625778], 'RHand': [0.10005956559397004, 1.0673019501688135, 0.045860714845347782], 'Waist': [-0.01667659130732119, 0.65812984269982977, -0.029779601977297978]},
            'C': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.17344633588355907, 0.0, -0.049717548065590166], 'LKnee': [-0.099435028781298507, 0.27401129363228421, -0.077966109000665154], 'Neck': [0.0056497121870149967, 0.85536724004764064, -0.017514202069581049], 'RFoot': [-0.012994351500110858, 0.014124280467537491, -0.047457690130736897], 'Torso': [-0.0033898205772208154, 0.67118642743629442, -0.035028269439398442], 'RKnee': [0.019209028170839172, 0.28474575352260084, -0.052542471508979491], 'LShoulder': [-0.15028248897684485, 0.79999997979503545, -0.075141320257039471], 'LHand': [-0.4615819268208512, 0.81864404348216135, -0.087005675439841876], 'RShoulder': [-0.072316379976179693, 0.87401130373476643, 0.029943488061155848], 'LHip': [-0.045762712492244659, 0.60338982226096782, -0.040677981626413437], 'LElbow': [-0.28474577036007132, 0.77570620392089462, -0.074011323939731019], 'RElbow': [0.042937839561266705, 0.99830507287391912, 0.032768276804781518], 'RHip': [-0.0090395664391767251, 0.62033896724074811, -0.022598983447823642], 'RHand': [-0.055932207898848021, 1.1197740195945052, 0.067231615435407552], 'Waist': [-0.019774026329493401, 0.63559321035065308, -0.03107348437846431]},
            'Psi': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.12104948177190784, 0.022659503825626592, -0.010137125871113716], 'LKnee': [-0.076326769370292383, 0.26475850291186642, -0.063208078394929715], 'Neck': [0.0077519448725628156, 0.8753726934166296, -0.023255834617688449], 'RFoot': [0.075134161099804864, 0.0, -0.029815117906127554], 'Torso': [-0.0011926082704875151, 0.65951104073869105, -0.031007779490251262], 'RKnee': [0.055456169064791033, 0.26118067810040385, -0.044126346067129472], 'LShoulder': [-0.11091233812958207, 0.81753130781086358, -0.046511669235376897], 'LHand': [-0.2593917679160741, 1.0345855865305018, -0.0077519448725628156], 'RShoulder': [0.12283842083445722, 0.80918306768866299, -0.013714968453788327], 'LHip': [-0.059033976105041512, 0.56529517396790396, -0.027429936907576655], 'LElbow': [-0.24746570964661554, 0.86583186279515367, -0.05664879510649061], 'RElbow': [0.26595112895356599, 0.84973167780039027, -0.0053667638740119159], 'RHip': [0.042933826652702282, 0.56231365773448816, -0.0083482045797764106], 'RHand': [0.26237328637089136, 1.064997035228691, 0.0095408661639001212], 'Waist': [-0.0053667283315877853, 0.61717352710683848, -0.020274251742227432]},
            'Stop': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.13154761011452501, 0.0053571448211564418, -0.0083332969674043845], 'LKnee': [-0.091071426480704432, 0.25178570015748752, -0.053571377253654268], 'Neck': [0.0, 0.87976189221755996, -0.02976187625203015], 'RFoot': [0.068452386337579496, 0.0, 0.010714360600223028], 'Torso': [-0.0089285628756090446, 0.65178571080117409, -0.039285705035843853], 'RKnee': [0.048214303390407977, 0.25119046972823794, -0.02976187625203015], 'LShoulder': [-0.10654761277544664, 0.81309523264668426, -0.021428579284625767], 'LHand': [-0.20059523575109284, 0.74880951253228456, 0.1886905650779297], 'RShoulder': [0.098214298068564715, 0.80476190020032479, -0.0077381020171098684], 'LHip': [-0.063095241516423053, 0.56428570237492226, -0.010714218684402739], 'LElbow': [-0.19940475715311615, 0.69345237303297136, 0.096428535822905809], 'RElbow': [0.14583333555076802, 0.67380952051504939, 0.11428580348994419], 'RHip': [0.033928560214687417, 0.56369046751080321, 0.0035714535334076761], 'RHand': [0.14821429274672146, 0.73273807806881519, 0.23214291859747574], 'Waist': [-0.012499998669539185, 0.61011903969963799, -0.0083332969674043845]},
            'M': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.10047845917714575, 0.020334916076695349, -0.046650759023446335], 'LKnee': [-0.059210530771878371, 0.28289473238601637, -0.079545535970351675], 'Neck': [0.025717711046163119, 0.88935406496015101, -0.032894776946905346], 'RFoot': [0.091507175818195854, 0.0, -0.040071860672003162], 'Torso': [0.010167475862703267, 0.70275118928556601, -0.037679546961918796], 'RKnee': [0.071172259741500501, 0.27990430459969973, -0.059210655542367513], 'LShoulder': [-0.099880380749624659, 0.87559808288360996, -0.062799054810071683], 'LHand': [-0.081339717779848178, 1.1070574288260113, 0.029904277863166344], 'RShoulder': [0.1375598207654099, 0.86483252859338566, -0.04605271624463643], 'LHip': [-0.04784688022977733, 0.6118421097192468, -0.041866131603277616], 'LElbow': [-0.20275119374165487, 0.97368422835067137, -0.041866131603277616], 'RElbow': [0.23444977372871795, 0.97188995741939688, -0.027511964153081981], 'RHip': [0.058612434520001692, 0.60825358568105348, -0.028708192305546529], 'RHand': [0.1202153324750312, 1.1004784591771457, 0.016148295786625352], 'Waist': [0.0077751265039077222, 0.66387559241473848, -0.036483318809454254]},
            'Up': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.11663707843653595, 0.012433408837254901, -0.028419240365098034], 'LKnee': [-0.07519242348390523, 0.27235052415032679, -0.068679795592418283], 'Neck': [0.0065127161162418313, 0.87921847547764709, -0.024274794279281038], 'RFoot': [0.085257527000833333, 0.0, -0.023090606329215686], 'Torso': [0.00059205868513071975, 0.6601539564320752, -0.030787475105620913], 'RKnee': [0.063943167306813722, 0.26702192540434638, -0.044997024708366015], 'LShoulder': [-0.10242747589893791, 0.81527532581578432, -0.050325658744248367], 'LHand': [-0.16814683690609478, 0.47306099677810254, -0.052693893484771243], 'RShoulder': [0.1190053308220098, 0.81290705578535949, -0.01420969076235293], 'LHip': [-0.052693911129722222, 0.56660747550227941, -0.032563686450915029], 'LElbow': [-0.13854352328311276, 0.64535229520934645, -0.074600453023529398], 'RElbow': [0.25340438155187911, 0.83777383816996731, 0.0325635452913072], 'RHip': [0.044997042353316995, 0.56542334048706699, -0.014801714157581693], 'RHand': [0.21788040167531045, 1.0396684612522875, 0.068679654432810461], 'Waist': [-0.0017762113452941162, 0.61634104027149506, -0.025458841069738562]},
            'Down': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.10754604733366779, 0.016636956424576889, -0.058823516912101102], 'LKnee': [-0.064171112578266076, 0.27510398584731421, -0.087344074352598985], 'Neck': [0.013071904452371426, 0.87997625305575633, -0.033273912849153778], 'RFoot': [0.092691616895193646, 0.0, -0.036244866226704343], 'Torso': [0.010695191332329936, 0.6636957841205432, -0.042186631318951298], 'RKnee': [0.074866321618452775, 0.26797386419504654, -0.062388604300020106], 'LShoulder': [-0.096850856001337859, 0.81521093563569469, -0.062388604300020106], 'LHand': [-0.16339869055357381, 0.46226976333166098, -0.075460544168105076], 'RShoulder': [0.12715390401222493, 0.82174690556973717, -0.029708825461234774], 'LHip': [-0.040404034501421479, 0.56862745853227226, -0.052881751819854148], 'LElbow': [-0.12953059942440967, 0.6440879451498428, -0.095068383138805446], 'RElbow': [0.26262626852888155, 0.8175876487557362, -0.0089127184697975152], 'RHip': [0.058229365193875886, 0.57040998894533923, -0.036244866226704343], 'RHand': [0.27332145986121148, 0.66250744526837924, 0.089126618046558484], 'Waist': [0.009506834772309191, 0.62032086707299827, -0.043969175012910797]},
            'Go': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.12424608032951806, 0.00060312854644043075, 0.00060309259671482778], 'LKnee': [-0.086248496582475284, 0.25874547177256307, -0.048250858910844102], 'Neck': [0.0042219537496714192, 0.87394451605629786, -0.028950601625847911], 'RFoot': [0.071170085197973701, 0.0, 0.018697164688281368], 'Torso': [-0.0048251002709746513, 0.63630879505722904, -0.03920389476451204], 'RKnee': [0.056694820334775346, 0.25392037150158842, -0.025331758447754121], 'LShoulder': [-0.10735826533083238, 0.80398070592606785, -0.0066344499605703409], 'LHand': [-0.31905911281685367, 0.57840771762957288, 0.22255727366484157], 'RShoulder': [0.1019300365134173, 0.79433050538411853, 0.0066344499605703409], 'LHip': [-0.059107370470262675, 0.54704462428654177, -0.010856385735378959], 'LElbow': [-0.17611580938075017, 0.68998793671007663, 0.091676689450164758], 'RElbow': [0.15560916019140208, 0.67792520400750289, 0.11761154049463371], 'RHip': [0.036791326654161911, 0.54402894560461401, 0.0030157505813789625], 'RHand': [0.27201447954288055, 0.54583835371251377, 0.25211096788740434], 'Waist': [-0.0090470540206460705, 0.59288298249277127, -0.0090469641463320639]},
            'Right': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.10873549203123778, 0.0012217313506918417, -0.028100185174915963], 'LKnee': [-0.067196079944209758, 0.25167989881265146, -0.083078751352255328], 'Neck': [0.014050092587457982, 0.87843616493744625, -0.038485010888497699], 'RFoot': [0.089187553749315973, 0.0, -0.003665266873876246], 'Torso': [0.0085522286875439734, 0.65302381786277264, -0.042761107026819505], 'RKnee': [0.076359192512549842, 0.25045814925650944, -0.054367736912893802], 'LShoulder': [-0.098961513787551789, 0.81429443157541626, -0.056200370349831927], 'LHand': [-0.18081857020001563, 0.4648747639799925, -0.00061082926444556052], 'RShoulder': [0.12522906552552962, 0.81001829902619416, -0.039706669417388818], 'LHip': [-0.042761143437719862, 0.55650579408477985, -0.04703720316514131], 'LElbow': [-0.13500305287194073, 0.63958460005338569, -0.072083096374228023], 'RElbow': [0.25473426360028145, 0.6921197126320664, -0.026267551737977839], 'RHip': [0.056200370349831927, 0.55772754364092181, -0.031154477140745207], 'RHand': [0.45326819326163131, 0.69395234606900458, 0.012828434058566861], 'Waist': [0.0079413630121980515, 0.6084300409881146, -0.040317644325435824]},
            'Y': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.12009513921990277, 0.0011890807833241086, -0.027943026322042198], 'LKnee': [-0.073721768279180228, 0.27764566753428871, -0.065992902653033952], 'Neck': [0.0071343606712532008, 0.88287754502002302, -0.019025009039033848], 'RFoot': [0.074316273234073291, 0.0, -0.024375819408838859], 'Torso': [-0.0035671891948188465, 0.69441143017236051, -0.024970306645347433], 'RKnee': [0.05588585774185497, 0.27467301873113192, -0.043400828447872707], 'LShoulder': [-0.11177171548370994, 0.87395959861055261, -0.040428108771177945], 'LHand': [-0.35671820188731268, 1.1307966890859749, -0.016646918345923602], 'RShoulder': [0.12187872495811994, 0.8596908418312772, -0.022592215952237187], 'LHip': [-0.058858506545011763, 0.60523187748573426, -0.032104720471754111], 'LElbow': [-0.22592153051972239, 0.98454223331093849, -0.011296107976118594], 'RElbow': [0.24910820713089141, 0.96848990851183037, 0.001783461709525726], 'RHip': [0.042211659072626133, 0.60107016561763793, -0.016646918345923602], 'RHand': [0.37693224741370945, 1.1135552835035427, 0.01129596622904265], 'Waist': [-0.0053507749330360234, 0.65636148296783081, -0.024970306645347433]},
            'Left': {'Head': [0.0, 1.0, 0.0], 'LFoot': [-0.1368547323189763, 0.0, -0.048019161640998148], 'LKnee': [-0.092436964868535976, 0.26650662259119062, -0.0858342657441232], 'Neck': [0.0036014478562041174, 0.87575032623346372, -0.035414174642753156], 'RFoot': [0.058823523098159261, 0.010204093314970618, -0.020408115075746198], 'Torso': [-0.012004790410249537, 0.65486195371144817, -0.041416569847877928], 'RKnee': [0.046818732687909724, 0.25810324426004772, -0.06062414863924314], 'LShoulder': [-0.10984393600736607, 0.81932773259567637, -0.061824684923624126], 'LHand': [-0.44057621770392463, 0.8001200464730186, -0.081032406823379421], 'RShoulder': [0.10564225578606898, 0.80312124407558094, -0.036014371230748611], 'LHip': [-0.067226883540753443, 0.56362546251737244, -0.044417695896245273], 'LElbow': [-0.25570227231437248, 0.73649461078846923, -0.093037197233628952], 'RElbow': [0.12364947717854081, 0.6410564304288221, -0.045017892484240728], 'RHip': [0.030612244167814336, 0.55882354098670806, -0.027010706868866419], 'RHand': [0.13085233711385152, 0.4783913676464559, 0.066026490364762533], 'Waist': [-0.015606238266453654, 0.61104442757037514, -0.037214907515129597]},
            
            
            
            
            };
            
        self.mutex = mutex.mutex();
        
    # __init__
    
    @staticmethod
    def normalisePose( pose ):
        "normalise a position"        
        xHead = 0;
        yHead = 1;  # to add a referencial value, even when no head...
        zHead = 0;
        
        yFootMin = 0;
        
        if( 'LFoot' in pose.keys() ):
            yFootMin = pose['LFoot'][1];
        if( 'RFoot' in pose.keys() ):
            val = pose['RFoot'][1];
            if( val < yFootMin ):
                yFootMin = val;
        if( 'Head' in pose.keys() ):
            xHead = pose['Head'][0];
            yHead = pose['Head'][1];
            zHead = pose['Head'][2];
            
        height = yHead - yFootMin;
        
        # normalise compared to height (not Z, nor width) (because we want to have the width value relative to the height)
        for k, v in pose.iteritems():
            pose[k][0] = ( pose[k][0] - xHead ) / height;
            pose[k][1] = ( pose[k][1] - yFootMin ) / height;
            pose[k][2] = ( zHead - pose[k][2] ) / height;
            
        return pose;
    # normalisePose - end
    
    def addPose( self, dictPos, strName = None ):
        "take pose to store in the known pose"
        "return list of joint in the pose or 0"
        
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
            print( "INF: SkeletonLibrary.addPose... (locked)" );
        
        if( strName == None ):
            strName = "pose_" + str( len( self.listPoses ) + 1 );

        print( "INF: SkeletonLibrary.addPose: receiving:\n['%s']: %s\n" % (strName, str( dictPos ) ) );
        
        if( len( dictPos ) < 1 ):
            print( "WRN: SkeletonLibrary.addPose: pose is empty" );
            self.mutex.unlock();
            return 0;
            
        self.listPoses[strName] = SkeletonLibrary.normalisePose( dictPos );
        print( "INF: SkeletonLibrary.addPose: adding:\n['%s']: %s\n" % (strName, str( self.listPoses[strName]  ) ) );
        self.mutex.unlock();
        return len( dictPos );
    # addPose - end
    
    @staticmethod
    def comparePose( p1, p2 ):
        "compare two positions"
        "It will return the median of absolute difference of joints in radians"
        #debug.debug( "SkeletonLibrary.comparePose( %s, %s ) - begin" % ( str( p1 ), str( p2 ) ) );
        if( len( p1 ) < 1 ):
          return 421.; # surely some sort of error => return a big value

        rDiffSum = 0.0;
        nNbrComp = 0;
        for k, v in p1.iteritems():
          if( k in p2.keys() ):
            rDiff = abs( v[0] - p2[k][0] ) + abs( v[1] - p2[k][1] );
            rDiffSum += rDiff;
            nNbrComp += 1;
        if( nNbrComp > 0 ):
            nValRet = rDiffSum / nNbrComp; 
            nValRet += ( abs( len( p1 ) - len( p2 ) ) ) * 0.015; # add a malus when number of joint are too different
        else:
            nValRet = 421.;
        # debug.debug( "poselibrary::PoseLibrary::comparePosition:\ncurrent: %s\ncomp: %s\n=> %f/%d = %f" % ( str(p1), str(p2), rDiffSum, nNbrComp, nValRet ) );
        return nValRet;
    # comparePose - end
    
    @staticmethod
    def poseToWrml( strName, pose, rWorldOffsetX = 0. ):
        "export one pose to wrml with a world offset"
        n = 1;
        
        strOut = "# Pose '%s' has %d joints: " % ( strName, len( pose ) );
        
        strOut += """
Transform {
  translation %f %f %f
  children [
    Shape 
    {
       appearance Appearance 
       {
            material Material { diffuseColor 1 0 0 }
       }
       geometry Text 
       {
                   string ["%s"]
                   fontStyle FontStyle 
                   {
                                family  "SANS"
                                style   "BOLD"
                                size    0.2
                                justify "MIDDLE"
                   }
        }
    }
  ]
}""" % ( pose["Head"][0]+rWorldOffsetX, pose["Head"][1]+0.2, pose["Head"][2], strName );
        
        for k, v in pose.iteritems():            
            
            strOut += """
	# ball for %s
    Transform {
      translation %f %f %f
      children [
        Shape {
          geometry Sphere { radius 0.01 }
          appearance Appearance {
            material Material { diffuseColor %d %d %d }
         }
        }
      ]
    }
    # ball - end
            """ % ( k, v[0] + rWorldOffsetX, v[1], v[2], (n&1), ((n&2)>>1), ((n&4)>>2) );
            
            # add text for each joint name
            strOut += """
Transform {
  translation %f %f %f
  children [
    Shape 
    {
       appearance Appearance 
       {
            material Material { diffuseColor %d %d %d }
       }
       geometry Text 
       {
                   string ["%s"]
                   fontStyle FontStyle 
                   {
                                family  "SANS"
                                style   "BOLD"
                                size    0.02
                                justify "MIDDLE"
                   }
        }
    }
  ]
}""" % ( v[0] + rWorldOffsetX, v[1]+0.01, v[2], (n&1), ((n&2)>>1), ((n&4)>>2), k );
            n += 1;
            if( n > 7 ):
                n = 1;
        # for - end
        return strOut;
    # poseToWrml - end
    
    
    def findNearestPose( self, otherPos ):
        "find nearest position between some known or specific position"
        "return an array [position, distance to this position, name of position (if this position has a name)]"
        # print( "normalise" );
        otherPos = SkeletonLibrary.normalisePose( otherPos );
        
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
            print( "INF: SkeletonLibrary.findNearestPose... (locked)" );
                
        # print( "recherche" );
        rDistMin = 1000.0;
        strNameMin = "";
        posMin = dict();
        for k, v in self.listPoses.iteritems():
          strName = k;
          rDist = SkeletonLibrary.comparePose( v, otherPos );
          # print( "findNearestPose: diff with pose: %s, rDist: %f" % ( k, rDist ) );
          if( rDist < rDistMin ):
            rDistMin = rDist;
            strNameMin = strName;
            posMin = v;
        # debug.debug( "posMin: %s\ndistMin: %f\nName: '%s'" % ( str( posMin ), rDistMin, strNameMin ) );
        debug.debug( "posMin: nName: '%s' distMin: %6.3f" % ( strNameMin, rDistMin ) );
        self.mutex.unlock();
        return [ posMin, rDistMin, strNameMin ];
    # findNearestPose - end
    
    def toString( self ):
        "return the whole object in a string"
        while( not self.mutex.testandset() ):
            time.sleep( 0.01 );
            print( "INF: SkeletonLibrary.toString... (locked)" );
            
        strOut = "";            
        strOut += "SkeletonLibrary: %d known position(s): {\n" % len( self.listPoses );
        for k, v in self.listPoses.iteritems():
            strOut += "    '%s': %s,\n" % ( k, str( v ) );
        self.mutex.unlock();
        return strOut + '}';
    # toString - end
    
    def toWrml( self, bSeparated = False ):
        "return the whole object as a wrml core of children"
        "http://www.web3d.org/x3d/specifications/vrml/ISO-IEC-14772-VRML97/part1/examples.html"
        "bSeparated: False: one big VRML string, True: return a dict with one VRML for each pose"
        strHeader = """#VRML V2.0 utf8
Transform {
  children 
  [
    NavigationInfo { headlight FALSE } # We'll add our own light

    DirectionalLight {        # First child
        direction 0 0 -1      # Light illuminating the scene
    }
"""     ;
        strFooter = """

          ] # end of children for world
        } # end of wrml
        """
        if( not bSeparated ):
            strOut = strHeader;        
            strOut += "# SkeletonLibrary: %d known position(s):\n\n" % len( self.listPoses );
            rOffsetX = 0;
            for k, v in self.listPoses.iteritems():
                strOut += SkeletonLibrary.poseToWrml( k, v, rOffsetX );
                rOffsetX += 1.5;
            # for - end
            strOut += strFooter;
            self.mutex.unlock();
            return strOut;
            
        aOut = dict();
        for k, v in self.listPoses.iteritems():
            strOut = strHeader;
            strOut += SkeletonLibrary.poseToWrml( k, v );
            strOut += strFooter;
            aOut[k] = strOut;
        # for - end
            
        self.mutex.unlock();
        return aOut;

    # toWrml - end

# class SkeletonLibrary - end

skeletonLibrary = SkeletonLibrary();

def autoTest():
    listSkeletons = [
                                [1, 1345649765, [-707.06, 887.10, 2642.84, 1.0], [-723.85, 644.57, 2575.11, 1.0], [-737.94, 392.074, 2502.76, 1.0], [0.0, 0.0, 0.0, 0.0], [-1015.17, 28.44, 2337.25, 1.0], [-477.019, 19.79, 2472.65, 1.0], [-968.08, 359.33, 2529.16, 1.0], [-531.77, 320.87, 2611.88, 1.0], [-893.31, 664.21, 2539.57, 1.0], [-554.38, 624.93, 2610.65, 1.0], [-870.50, 153.30, 2405.56, 1.0], [-633.56, 125.84, 2455.25, 1.0], [-836.14, -371.57, 2402.34, 1.0], [-670.35, -376.45, 2449.88, 1.0], [-841.90, -670.3, 2274.94, 1.0], [-634.61, -665.0, 2286.64, 1.0]], 
                                [4, 1345649765, [102.544, 965.17, 2042.36, 1.0], [108.82, 674.00, 2159.06, 1.0], [94.438, 419.91, 2106.24, 1.0], [0.0, 0.0, 0.0, 0.0], [-184.78, 379.47, 1842.67, 1.0], [338.72, 134.69, 2021.69, 1.0], [-151.80, 491.8978576660156, 2068.01, 1.0], [346.80, 396.92, 2160.59, 1.0], [-36.10, 678.97, 2174.67, 1.0], [253.76, 669.04, 2143.4, 1.0], [-21.97, 169.32, 2064.40, 1.0], [182.06, 162.33, 2042.43, 1.0], [-10.07, -255.69, 2019.38, 1.0], [175.87, -241.37, 2004.7, 1.0], [24.97, -640.50, 2069.04, 1.0], [-634.61, -665.0, 2286.64, 1.0]],
                            ];
    if( False ):
        # dump known skeleton position to wrml
        dumpW = skeletonLibrary.toWrml( bSeparated = False );
        print( dumpW );
        if( not system.isOnNao() ):
            if( system.isOnWin32() ):
                pf = open( "\generated.wrl", "wt" );
            pf.write( dumpW );
            pf.close();
        dumpW = skeletonLibrary.toWrml( bSeparated = True );
    #    print( dumpW );
        if( not system.isOnNao() ):
            for k, v in dumpW.iteritems():
                pf = open( "\generated_%s.wrl" % k, "wt" );
                pf.write( v );
                pf.close();
    # dump to wrml - end
    
    if( False ):
        # various test
        dictPose1 = { "Head": [0,1,3], "LFoot": [ 1, -0.5, 3], "RFoot":[ -1, -0.5, 3] };
        dictPose2 = { "Head": [10,1,2], "LFoot": [ 10.2, -0.8, 2], "RFoot":[ 9.8, -0.8, 2] };
        dictPose3 = { "Head": [0,1,1], "LFoot": [ 0.3, -0.5, 1], "RFoot":[ -0.4, -0.5, 1] };
        skeletonLibrary.addPose( dictPose1 );
        skeletonLibrary.addPose( dictPose2 );
        res = skeletonLibrary.findNearestPose( dictPose3 );
        print( res );        
    # various test - end
    if( False ):
        # kinect => OpenNI        
        kinectPsyRawData = [0, 0.156,0.415,3.449, 1, 0.155,0.491,3.456, 2, 0.159,0.864,3.446, 
        3, 0.159,1.058,3.396, 4, -0.035,0.760,3.469, 5, -0.271,0.719,3.416, 6, -0.292, 0.897,3.300, 
        7, -0.265,0.980,3.289, 8, 0.363,0.764,3.464, 9, 0.613,0.730,3.444,
        10, 0.637,0.946,3.390, 11, 0.616,1.034,3.356, 12, 0.071,0.327,3.444, 13, 0.020, -0.256,3.558, 
        14, -0.048,-0.634,3.561, 15, -0.083,-0.719,3.497, 16, 0.240,0.324, 3.449, 
        17, 0.277,-0.239,3.594, 18, 0.304,-0.643,3.591, 19, 0.335,-0.722,3.552 ];

        convertedData = kinect.convertToRawOpenNI( kinectPsyRawData );
        dictPose = openNI.convertToDict( convertedData );        
        print( "dictPose: %s" % str( dictPose ) );    
        res = skeletonLibrary.findNearestPose( dictPose );
        strOut = SkeletonLibrary.poseToWrml( "test pose", dictPose, 0 );
        print( "wrml: " + strOut );
        # for - end        
        print( "res: " + str( res ) );
    if( True ):
        # openNI
        nIdx = openNI.findNearestUser( listSkeletons );
        vDir = openNI.findDirection( listSkeletons[nIdx] );
        print( "vDir: %s" % vDir );
        infoUser = openNI.analyseUserPos( listSkeletons );
        print( "infoUser: %s" % infoUser );
# autoTest - end

#autoTest();