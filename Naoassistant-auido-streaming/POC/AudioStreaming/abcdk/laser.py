# -*- coding: utf-8 -*-

###########################################################
# Aldebaran Behavior Complementary Development Kit
# Laser okuyo tools
# Aldebaran Robotics (c) 2010 All Rights Reserved - This file is confidential.
###########################################################

# this module should be called Type, but risk of masking with the keyword type.

"""Laser okuyo tools."""
print( "importing abcdk.laser" );

import copy
import naoqitools
import struct

class LaserScan:
    "Object to analyse a laser scan"
    def __init__( self ):
        self.rRobotPosX = 0.;
        self.rRobotPosY = 0.;
        self.rRobotPosT = 0.;
        
        self.rLaserPosX = 0.;
        self.rLaserPosY = 0.;
        self.rLaserPosZ = 0.;
        self.rLaserPosWX = 0.;
        self.rLaserPosWY = 0.;
        self.rLaserPosWZ = 0.;
        
        self.aScan = []; # an array of value [dist1 in mm, angle 1 in radians, dist2, angle2, dist3, angle3, ...
        
        self.depacker = struct.Struct( "f" );
    # __init__ - end
    
    def __str__( self ):
        strOut = "";
        strOut += "rRobotPosX: %5.2f\n" % self.rRobotPosX;
        strOut += "rRobotPosY: %5.2f\n" % self.rRobotPosY;
        strOut += "rRobotPosT: %5.2f\n" % self.rRobotPosT;
        
        strOut += "rLaserPosX: %5.2f\n" % self.rLaserPosX;
        strOut += "rLaserPosY: %5.2f\n" % self.rLaserPosY;
        strOut += "rLaserPosZ: %5.2f\n" % self.rLaserPosZ;

        strOut += "rLaserPosWX: %5.2f\n" % self.rLaserPosWX;
        strOut += "rLaserPosWY: %5.2f\n" % self.rLaserPosWY;
        strOut += "rLaserPosWZ: %5.2f\n" % self.rLaserPosWZ;
        
        strOut += "scan has %d value(s): \n" % ( len( self.aScan ) / 2 ) ;
        for i in range( min( 10, len( self.aScan ) ) ):
            strOut += "(%5.2f: %5.2fmm)\n" % ( self.aScan[i*2+1], self.aScan[i*2+0] );
        strOut += "...\n";
        return strOut;
    # __str__ - end

    def setFromRawBuffer( self, rawBuffer ):
        "take a raw buffer directly from a scan from the c++ module"
        nOffset = 0;
        self.rRobotPosX = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        self.rRobotPosY = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        self.rRobotPosT = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        
        self.rLaserPosX = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        self.rLaserPosY = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        self.rLaserPosZ = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        
        self.rLaserPosWX = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        self.rLaserPosWY = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        self.rLaserPosWZ = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
        
        nNbrSamples = ( ( len( rawBuffer ) - nOffset ) / self.depacker.size ) / 2;
        self.aScan = [0]*( nNbrSamples * 2 ); # reserve it
        for i in range( nNbrSamples ):
            self.aScan[i*2+0] = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
            self.aScan[i*2+1] = self.depacker.unpack_from(rawBuffer,nOffset)[0]; nOffset += self.depacker.size;
            
    # setFromRawBuffer - end
    

    def setFromALMemory( self, data ):
        "analyse a buffer from ALMemory.getData Device/Laser/Value"
        self.aScan = [];
        for sample in data:
            if( sample[0] != 0 ):
                #~ self.aScan.append( sample[1] * 1000 );
                #~ self.aScan.append( sample[0] );
                self.aScan.append( sample[0] );
                self.aScan.append( sample[1] );
            
    # setFromRawBuffer - end    
    
    def getMinMax( self ):
        "get min and max dist from last scan"
        "return [min (in mm), angle at min (in radians), max, angle at max]"
        if( len( self.aScan ) == 0 ):
            return None;
        rMax = 0.;
        rMin = 999999.;
        rAngleMin = 0.;
        rAngleMax = 0.;
        nTotalSize = len( self.aScan );
        for i in range( 0, nTotalSize, 2 ):
            rDist = self.aScan[i];
            if( rDist > rMax ):
                rMax = rDist;
                rAngleMax = self.aScan[i+1];
            if( rDist < rMin ):
                rMin = rDist;
                rAngleMin = self.aScan[i+1];
        return [ rMin, rAngleMin, rMax, rAngleMax ];
    # getMinMax - end
            
            
# class LaserScan - end

class BaseLaserScan:
    def __init__(self):
        self.mem = naoqitools.myGetProxy( "ALMemory" )
        strTemplate = "Device/SubDeviceList/Platform/LaserSensor/%s/Horizontal/Seg%02d/%s/Sensor/Value";
        self.dListKeyNamePerSide = {}; # an array of var for each side
        for strSide in ["Front", "Left", "Right"]:
            self.dListKeyNamePerSide[strSide] = [];
            for i in range(1,16):
                for axis in ["X","Y"]:
                    self.dListKeyNamePerSide[strSide].append( strTemplate % (strSide,i,axis) );
        

    def get_laser_scan( self, strSide = "Front" ):
        """
        strSide: Front/Left/Right/Shovel => moved to abcdk.laser
        """
        value = self.mem.getListData( self.dListKeyNamePerSide[strSide] );
        return value;        
# class BaseLaserScan - end

baseLaserScan = BaseLaserScan();

class Undistorter:
    """
    Undistort laser scan, related to a bunch of measures generated by calibrate_laser.pml
    Exemple:
        # Take a laser scan: 
        scan = abcdk.laser.baseLaserScan.get_laser_scan( "Front" )
        # Undistort it: 
        abcdk.laser.undistorter.undistort( scan, "Front" )
        # You could decide to not correct Y:
        abcdk.laser.undistorter.undistort( scan, "Front", bChangeY = False )
    """
    def __init__( self, nNbrLaser = 15 ):        
        self.rDistMax = 6.5 # in m
        self.rPrecision = 0.1
        self.rLaserAperture = 0.61454497405; # aperture at each side
        self.nNbrLaser = nNbrLaser;
        self.listSide = { 'F', 'L', 'R' };
        self.reset();
            
    def reset( self ):
        self.daLaserUndistort = {}; # a dict: for each side, a list of list of values: each value is the measured value at theoric x*10cm, eg: self.aLaserUndistort[0][0] is the laser 0 measured at 0 cm, self.aLaserUndistort[0][1] is laser 1 at 10cm ...        
        for side in self.listSide:
            self.daLaserUndistort[side] = [];
            for i in range(self.nNbrLaser):
                self.daLaserUndistort[side].append( [] );
                self.daLaserUndistort[side][i] = copy.deepcopy( [0.]*int(self.rDistMax/self.rPrecision) );
                
    def getDefaultPepperMeasures( self ):
        """
        get pepper seen on PepperAlex
        """            
        laser_txt = [
            [1427298959.53, "F", 0.6, [0.6994356602430344, 0.2681614696979523, 0.6865601539611816, 0.21786116063594818, 0.6864393353462219, 0.17413143813610077, 0.6839577555656433, 0.13125048577785492, 0.6705316364765167, 0.08817793875932693, 0.6615559458732605, 0.04765789210796356, 0.6632136702537537, 0.008672293275594711, 0.6523160040378571, -0.029873437248170376, 0.6494304537773132, -0.06818148493766785, 0.6441513895988464, -0.10622954368591309, 0.6318528354167938, -0.14280948787927628, 0.6273660957813263, -0.1811639443039894, 0.6209044575691223, -0.2196095958352089, 0.6073815226554871, -0.2559384047985077, 0.6067114174365997, -0.29881311058998106] ],
            [1427299067.33, "F", 0.7, [0.7932957410812378, 0.3041471242904663, 0.7789748907089233, 0.24718646705150604, 0.7773168683052063, 0.19718466699123383, 0.7730477452278137, 0.14834672212600708, 0.7804335355758667, 0.10263054072856903, 0.770874559879303, 0.05553310737013817, 0.751992251475652, 0.00983317733431856, 0.7449405193328857, -0.0341152660548687, 0.7416452169418335, -0.07786279916763306, 0.748953640460968, -0.12351289391517639, 0.7338842451572418, -0.1658703237771988, 0.7173028588294983, -0.2071348935365677, 0.7156264781951904, -0.2531121075153351, 0.7075592378775278, -0.29815129339694973, 0.6933419704437256, -0.3414797782897949] ],
            [1427299152.62, "F", 0.8, [0.8953989267349244, 0.3432931870222092, 0.8789654970169067, 0.27891576290130615, 0.875216007232666, 0.22201907634735107, 0.8867573142051697, 0.17016743123531342, 0.8769163489341736, 0.11531846225261688, 0.8644611835479736, 0.062275003641843796, 0.8666273355484009, 0.011332165449857712, 0.8652246197064718, -0.03962379110356172, 0.8511936902999878, -0.08936391547322274, 0.8382793664932251, -0.13824394345283508, 0.8286991715431213, -0.18730011582374573, 0.8310361027717591, -0.23997755199670792, 0.8052762111028035, -0.2848206063111623, 0.7986891269683838, -0.33655160665512085, 0.7807032585144044, -0.38450632691383363] ],
            [1427299252.55, "F", 0.9, [0.9629645347595215, 0.36919763684272766, 0.96790611743927, 0.30713863174120587, 0.9729403754075369, 0.24680915971597037, 0.9894917011260986, 0.18988201022148132, 0.976404070854187, 0.12840154767036438, 0.9822651147842407, 0.07076148688793182, 0.9587854743003845, 0.012537240236997605, 0.9550842841466268, -0.043739000956217446, 0.9439421892166138, -0.09910126278797786, 0.9357946813106537, -0.1543255850672722, 0.9189943671226501, -0.20770835876464844, 0.9192222714424133, -0.2654429793357849, 0.898087739944458, -0.31764739751815796, 0.8874683380126953, -0.3739613890647888, 0.8639415502548218, -0.4255022406578064] ],
            [1427299332.08, "F", 1.0, [1.0722253719965618, 0.41108790040016174, 1.0849570035934448, 0.34428152441978455, 1.0755071640014648, 0.2728276550769806, 1.062849998474121, 0.20395934581756592, 1.0784238338470458, 0.1418176054954529, 1.0534557104110718, 0.07588999718427658, 1.0560954809188843, 0.013809681870043278, 1.0550799369812012, -0.048318393528461456, 1.050412654876709, -0.11027923971414566, 1.0421098470687866, -0.17185844480991364, 1.006748636563619, -0.2275423228740692, 1.0147249698638916, -0.29302123188972473, 0.9777604500452677, -0.34582706888516745, 0.9733041524887085, -0.4101308584213257, 0.9475018382072449, -0.46665674448013306] ],
            [1427299443.68, "F", 1.1, [1.1519466638565063, 0.4416528046131134, 1.1546412309010823, 0.36639395356178284, 1.1958329677581787, 0.30335110425949097, 1.1787083148956299, 0.2261923849582672, 1.1899698972702026, 0.1564864069223404, 1.1654258966445923, 0.08395622670650482, 1.1683461666107178, 0.015277491882443428, 1.1672227382659912, -0.05345408245921135, 1.1610590974489847, -0.12189562817414601, 1.1330256064732869, -0.1868517150481542, 1.1102662086486816, -0.2509390413761139, 1.0935882329940796, -0.3157944679260254, 1.0731253623962402, -0.37955695390701294, 1.0489481687545776, -0.4420057535171509, 1.0202823837598165, -0.5025020708640416] ],
            [1427299769.88, "F", 1.3, [1.3378551006317139, 0.5129295587539673, 1.3657031059265137, 0.43336865305900574, 1.3455084562301636, 0.3413197994232178, 1.3632514476776123, 0.2616059482097626, 1.3868771076202393, 0.18238060474395754, 1.3537904818852742, 0.09752584497133891, 1.345974087715149, 0.017600184306502342, 1.3446797132492065, -0.061580900102853775, 1.3387315273284912, -0.14054884016513824, 1.328149676322937, -0.21903039515018463, 1.274330496788025, -0.28802037239074707, 1.25518798828125, -0.3624595105648041, 1.231701374053955, -0.4356442093849182, 1.1913145025571188, -0.5019960910081863, 1.138484001159668, -0.5607178807258606] ],
            [1427299938.55, "F", 1.4, [1.4297422170639038, 0.5481587052345276, 1.4611930847167969, 0.4636698067188263, 1.484211802482605, 0.37650516629219055, 1.4538854360580444, 0.2789984941482544, 1.4677761793136597, 0.19301919639110565, 1.4765866994857788, 0.10637196898460388, 1.480286717414856, 0.01935647800564766, 1.431312918663025, -0.06554834544658661, 1.4249813556671143, -0.149603933095932, 1.4151546955108643, -0.23337873816490173, 1.3975613117218018, -0.3158726394176483, 1.3529543817043304, -0.3906914100050926, 1.3086798191070557, -0.4628709554672241, 1.2772587895393372, -0.5382112890481949, 1.2075735330581665, -0.594745397567749] ],
            [1427300003.60, "F", 1.5, [1.4804954528808594, 0.5676173567771912, 1.5668717622756958, 0.497204065322876, 1.5368986129760742, 0.38987040519714355, 1.6144105195999146, 0.30980297923088074, 1.629834771156311, 0.21433064341545105, 1.5814793109893799, 0.11392834037542343, 1.585442066192627, 0.02073150873184204, 1.583917498588562, -0.07253701984882355, 1.5228524208068848, -0.15987907350063324, 1.5108152627944946, -0.24915450811386108, 1.493549108505249, -0.3375675082206726, 1.4222993850708008, -0.41071611642837524, 1.3956856727600098, -0.4936443269252777, 1.3349981307983398, -0.5625414649645487, 1.285373330116272, -0.6330627799034119] ],
            [1427300083.14, "F", 1.6, [1.6565239429473877, 0.6351061463356018, 1.6266053915023804, 0.516158938407898, 1.7196333408355713, 0.43622535467147827, 1.67595636844635, 0.3216135799884796, 1.6919687986373901, 0.22250153124332428, 1.639618158340454, 0.11811660975217819, 1.6437265872955322, 0.02149364724755287, 1.6421459913253784, -0.07520364969968796, 1.634881854057312, -0.17164066433906555, 1.5644465684890747, -0.2579990327358246, 1.546567440032959, -0.3495505452156067, 1.5207244813442231, -0.43913822919130324, 1.4692089557647705, -0.5196489989757538, 1.3923343896865845, -0.5867018103599548, 1.3280754089355469, -0.6540940403938293] ],
            [1427300178.94, "F", 1.7, [1.7247408628463745, 0.6612603068351746, 1.7327871561050416, 0.5498528003692628, 1.7904492616653442, 0.4541894793510437, 1.742309808731079, 0.3343466818332672, 1.8000027736028035, 0.23670849353075027, 1.7719435612360634, 0.12764921635389329, 1.7739485502243042, 0.023196449503302574, 1.7722426652908325, -0.08116155117750168, 1.7644031047821045, -0.18523864448070526, 1.694452448685964, -0.2794388304154078, 1.6645499467849731, -0.3762165904045105, 1.5793368816375732, -0.4560636878013611, 1.5278033971786498, -0.5403734326362609, 1.4561442494392394, -0.6135900199413299, 1.3736557960510254, -0.6765429973602295] ],
            [1427300293.44, "F", 1.8, [1.7987439632415771, 0.6896328926086426, 1.7984136939048767, 0.5706775784492493, 1.8672716617584229, 0.47367727756500244, 1.891895055770874, 0.3630518615245819, 1.9955134391784668, 0.2624190151691437, 1.9135303854942323, 0.13784899115562438, 1.8470011949539185, 0.024151697754859924, 1.8452249765396118, -0.08450385183095932, 1.8370625972747803, -0.19286692142486572, 1.8225418329238892, -0.3005625605583191, 1.7304518222808838, -0.3911115527153015, 1.6395457983016968, -0.4734501540660858, 1.6088670492172241, -0.5690450668334961, 1.5668446898460389, -0.6602369725704194, 1.4224181175231934, -0.7005590796470642] ],
            [1427300731.99, "F", 2.1, [2.0639443397521973, 0.7913098335266113, 2.155824601650238, 0.6840922236442566, 2.2531239986419678, 0.5715578198432922, 2.1708290576934814, 0.41657891869544983, 2.2424540758132934, 0.29489283710718156, 2.210412561893463, 0.15923612266778947, 2.210249423980713, 0.028901591897010803, 2.2081239223480225, -0.1011231541633606, 2.1983561515808105, -0.2307979017496109, 1.9951735496520997, -0.3290319263935089, 2.0551395416259766, -0.4644964933395386, 1.933685541152954, -0.5583886504173279, 1.8161615133285522, -0.6423637270927429, 1.7022076845169067, -0.7172762155532837, 1.5915412902832031, -0.7838544249534607] ],
            [1427300839.01, "F", 2.2, [2.170435905456543, 0.8321384191513062, 2.215614080429077, 0.7030647993087769, 2.375602960586548, 0.6026274561882019, 2.4069297313690186, 0.4618862569332123, 2.3046462535858154, 0.30307137966156006, 2.3184802532196045, 0.16702121496200562, 2.3242897987365723, 0.030392803251743317, 2.322054624557495, -0.10634072124958038, 2.1983561515808105, -0.2307979017496109, 2.1809794902801514, -0.35967394709587097, 2.0551395416259766, -0.4644964933395386, 2.0242679119110107, -0.5845460295677185, 1.8975030183792114, -0.6711336374282837, 1.7752439975738525, -0.7480522990226746, 1.5915412902832031, -0.7838544249534607] ],
            [1427384568.86, "F", 2.3, [2.170435905456543, 0.8321384191513062, 2.3360540866851807, 0.741283118724823, 2.375602960586548, 0.6026274561882019, 2.5451855659484863, 0.4884173572063446, 2.4299259185791016, 0.3195462226867676, 2.444511890411377, 0.17610041797161102, 2.450637102127075, 0.032044943422079086, 2.4482805728912354, -0.11212135851383209, 2.437450647354126, -0.2558996081352234, 2.2935097217559814, -0.3782317340373993, 2.267298698425293, -0.5124480724334717, 2.1236672401428223, -0.6132494807243347, 1.986390471458435, -0.7025725245475769, 1.9416377544403076, -0.8181672692298889, 1.728182315826416, -0.8511518836021423]],
            [1427384679.86, "F", 2.4, [2.295152187347412, 0.8799542784690857, 2.3360540866851807, 0.741283118724823, 2.443831205368042, 0.619935154914856, 2.560685062408447, 0.4913916915655136, 2.577952265739441, 0.33901235461235046, 2.593426823616028, 0.18682811409235, 2.5210204124450684, 0.032965287566185, 2.5185961723327637, -0.11534152925014496, 2.437450647354126, -0.2558996081352234, 2.4181840419769287, -0.3987922668457031, 2.267298698425293, -0.5124480724334717, 2.2332403659820557, -0.6448907852172852, 2.0839297771453857, -0.7370714545249939, 2.017911100387573, -0.8503073334693909, 1.766882836818695, -0.8702123761177063]],
            [1427384809.61, "F", 2.5, [2.4198684692382812, 0.9277701377868652, 2.4702389240264893, 0.7838630080223083, 2.512059450149536, 0.63724285364151, 2.7001805305480957, 0.5181607007980347, 2.7259786128997803, 0.35847848653793335, 2.7423417568206787, 0.197555810213089, 2.5914037227630615, 0.03388563171029091, 2.588911771774292, -0.11856169998645782, 2.5774595737457275, -0.2705986797809601, 2.432074284553528, -0.4010829597711563, 2.3905482292175293, -0.5403045415878296, 2.2332403659820557, -0.6448907852172852, 2.1914525032043457, -0.7751015424728394, 2.0369794368743896, -0.8583423495292664, 1.814041519165039, -0.8934386193752288]],
            [1427385085.59, "F", 2.7, [2.434604835510254, 0.9334200084209442, 2.4702389240264893, 0.7838630080223083, 2.665037155151367, 0.6760492324829102, 2.7001805305480957, 0.5181607007980347, 2.90262770652771, 0.38170865178108215, 2.920051097869873, 0.21035784482955933, 2.927367925643921, 0.03827875852584839, 2.9245529174804688, -0.1339327096939087, 2.911616086959839, -0.30568063259124756, 2.712806224822998, -0.44737955927848816, 2.6818032264709473, -0.6061331629753113, 2.4898905754089355, -0.719003438949585, 2.3105790615081787, -0.8172357678413391, 2.1420798301696777, -0.902629554271698, 1.98297917842865, -0.9766425490379333]],
            [1427385265.81, "F", 2.8, [2.567232131958008, 0.984268844127655, 2.790494680404663, 0.88548743724823, 2.665037155151367, 0.6760492324829102, 2.8751578330993652, 0.5517385601997375, 2.90262770652771, 0.38170865178108215, 3.0818167686462403, 0.2220112919807434, 3.109810495376587, 0.0406644057482481, 3.0055604934692384, -0.1376425266265869, 2.911616086959839, -0.30568063259124756, 2.888601779937744, -0.4763706922531128, 2.6818032264709473, -0.6061331629753113, 2.6415183544158936, -0.7627888321876526, 2.443300485610962, -0.8641784191131592, 2.2585225105285645, -0.9516960978507996, 2.0852932929992676, -1.0270335674285889]],
            [1427388211.39, 'F', 3.0, [2.7335939407348633, 1.0480514764785767, 2.9837303161621094, 0.9468055367469788, 3.259855270385742, 0.826938807964325, 3.074256181716919, 0.5899452567100525, 3.3343982696533203, 0.4384884238243103, 3.3544135093688965, 0.24164891242980957, 3.223176622390747, 0.042146801203489306, 3.1270718574523926, -0.14320725202560425, 3.113239049911499, -0.3268483281135559, 3.0886311531066895, -0.509358286857605, 2.8555896282196045, -0.6454118490219116, 2.6415183544158936, -0.7627888321876526, 2.443300485610962, -0.8641784191131592, 2.2585225105285645, -0.9516960978507996, 2.0852932929992676, -1.0270335674285889]],
            [1427388305.64, 'F', 3.3, [2.7903825998306275, 1.0698240756988526, 2.9837303161621094, 0.9468055367469788, 3.259855270385742, 0.826938807964325, 3.5680015087127686, 0.684694230556488, 3.3343982696533203, 0.4384884238243103, 3.3544135093688965, 0.24164891242980957, 3.362818717956543, 0.04397278651595116, 3.3595850467681885, -0.15385541319847107, 3.344723701477051, -0.35115110874176025, 3.3182859420776367, -0.5472316145896912, 3.053333044052124, -0.6901051998138428, 2.8126943111419678, -0.8122191429138184, 2.760063886642456, -0.9762154221534729, 2.5336921215057373, -1.067647099494934, 2.1986491680145264, -1.0828627347946167]],
            
            # the plinthe of 0.05 was added afterward
            [1427450081.04, 'L', 0.6, [0.6542782664299012, 0.27345073223114014, 0.6723645806312561, 0.2293248325586319, 0.6580445051193238, 0.17558445036411285, 0.6597279787063599, 0.1294533759355545, 0.6492537736892701, 0.08279358595609665, 0.6448488116264344, 0.03894500434398651, 0.6375145792961121, -0.003841055789962411, 0.627370285987854, -0.0453893281519413, 0.6226166367530823, -0.08675771951675415, 0.6149027228355408, -0.12767763435840607, 0.6042685985565186, -0.1679375022649765, 0.5985895872116089, -0.21032752096652985, 0.5898426651954651, -0.25284725427627563, 0.5779806852340699, -0.2952900826931, 0.5707479000091553, -0.34256094694137573]],
            [1427450261.86, 'L', 0.7, [0.7415572285652161, 0.3129465878009796, 0.7622558355331421, 0.2624473571777344, 0.7578397035598755, 0.20440223067998886, 0.754591989517212, 0.1495942771434784, 0.7398840069770813, 0.09531516581773758, 0.7335846304893494, 0.044754575937986374, 0.7239832162857056, -0.004406370688229799, 0.7329410195350647, -0.0536886528134346, 0.7163923263549805, -0.10096577554941177, 0.7074152112007142, -0.14858701825141907, 0.7056152105331421, -0.19864444434642792, 0.6896474242210389, -0.24523881077766418, 0.6806869387626648, -0.29539620876312256, 0.6786561489105225, -0.35159605741500854, 0.6622167706489563, -0.40273144841194153]],
            [1427450400.16, 'L', 0.8, [0.8240374207496644, 0.3502708971500397, 0.8472046732902527, 0.29374876618385315, 0.850426185131073, 0.23113834857940674, 0.8344517827033997, 0.16654956340789795, 0.8443912148475647, 0.10975399613380432, 0.8354712009429932, 0.051425132900476456, 0.8228557586669922, -0.005052780266851187, 0.8095346927642822, -0.05970997996628284, 0.8141512751579285, -0.11577732861042023, 0.8038571953773499, -0.17038455605506897, 0.8033330321311951, -0.22825190424919128, 0.7849852919578553, -0.2817910611629486, 0.7762266874313355, -0.3401443362236023, 0.7512459576129914, -0.39219423830509187, 0.7327692985534668, -0.4491426646709442]],
            [1427450530.65, 'L', 0.9, [0.9102776169776917, 0.3892966866493225, 0.9152854561805726, 0.31883472204208374, 0.9359580159187317, 0.2558372914791107, 0.9332495212554932, 0.1875256448984146, 0.9261436939239502, 0.12104901671409607, 0.9325767636299134, 0.057782676070928574, 0.9344473361968995, -0.005782344378530979, 0.9140356063842774, -0.06792519986629486, 0.906921672821045, -0.12983305752277374, 0.9127056479454041, -0.19498614966869354, 0.894765305519104, -0.2559549242258072, 0.889646852016449, -0.3219179570674896, 0.8526368856430054, -0.37593275904655454, 0.8380592346191407, -0.44074732065200806, 0.8371341109275818, -0.5177964568138123]],
            [1427450738.06, 'L', 1.0, [0.9895872354507447, 0.42518624663352966, 0.9976380348205567, 0.34917946457862853, 0.9961517333984375, 0.27321937680244446, 1.0133377194404602, 0.20452944934368134, 1.0255437970161438, 0.13478223979473114, 1.0240172863006591, 0.06376932561397552, 1.034789490699768, -0.006438361946493387, 1.0100784182548523, -0.07547550648450851, 1.0021737694740296, -0.1442648023366928, 1.0105811834335328, -0.21710768342018127, 0.9924985051155091, -0.285567045211792, 0.9695435643196106, -0.35255011916160583, 0.9418350338935852, -0.41771069169044495, 0.9293590664863587, -0.4918096959590912, 0.8937338173389435, -0.5550291240215302]],
            [1427450957.41, 'L', 1.1, [6.427411365509033, 2.885934829711914, 1.1493824005126954, 0.4050932228565216, 1.1505672931671143, 0.31780984103679655, 1.1641741871833802, 0.23655402660369873, 1.1528778791427612, 0.15237487033009528, 1.1729403018951416, 0.07351938262581825, 1.1602333068847657, -0.007258488796651363, 1.143853533267975, -0.08599208667874336, 1.1477290272712708, -0.16631802916526794, 1.1149462461471558, -0.24069597497582434, 1.1118999004364014, -0.3217443823814392, 1.0617945790290833, -0.38791883587837217, 1.0300687432289124, -0.4590369164943695, 0.9945523619651795, -0.5282711386680603, 0.9632859945297242, -0.600782322883606]],
            [1427451175.51, 'L', 1.2, [6.427411365509033, 2.885934829711914, 1.1761944770812989, 0.4149727523326874, 1.172578501701355, 0.3241659998893738, 1.1929692506790162, 0.24266760051250458, 1.1898325920104982, 0.1574805796146393, 1.215949821472168, 0.07633523643016815, 1.250189471244812, -0.007846604101359844, 1.2148521423339844, -0.0915735587477684, 1.205261516571045, -0.17503482103347778, 1.189698624610901, -0.25759127736091614, 1.1682441711425782, -0.3388161063194275, 1.1706724643707276, -0.42966228723526, 1.1138875484466553, -0.498295271396637, 1.0975153923034668, -0.5858564972877502, 1.052712368965149, -0.6596091985702515]],
            [1427451503.89, 'L', 1.3, [6.427411365509033, 2.885934829711914, 1.2076229333877564, 0.42655330896377563, 1.2352797269821167, 0.34227216243743896, 1.256809401512146, 0.2562217116355896, 1.2721003770828248, 0.16884678602218628, 1.3163633823394776, 0.08290934562683105, 1.2907557725906373, -0.008111819066107273, 1.3151710510253907, -0.09946002811193466, 1.3047544240951539, -0.19010911881923676, 1.28785138130188, -0.279775470495224, 1.26454918384552, -0.3679955005645752, 1.23496835231781, -0.45431312918663025, 1.233130145072937, -0.5541452169418335, 1.157614040374756, -0.619468629360199, 1.1321120023727418, -0.7118403017520905]],
            [1427451724.95, 'L', 1.4, [6.427411365509033, 2.885934829711914, 1.3093548059463502, 0.4640388131141663, 1.343248176574707, 0.3734501302242279, 1.3667389631271363, 0.27956122159957886, 1.4250635385513306, 0.18998035788536072, 1.393213438987732, 0.0879407525062561, 1.4380957365036011, -0.009075099602341652, 1.4338558197021485, -0.10879029333591461, 1.3809000730514527, -0.20164600014686584, 1.3629711151123047, -0.29675382375717163, 1.3784850120544434, -0.40251684188842773, 1.3461292266845704, -0.49693188071250916, 1.3070730447769165, -0.588778018951416, 1.261518406867981, -0.6775804758071899, 1.209700870513916, -0.7628801465034485]],
            [1427451867.91, 'L', 1.5, [6.427411365509033, 2.885934829711914, 1.537790584564209, 0.5482113361358643, 1.5733355760574341, 0.4398922324180603, 1.6010056018829346, 0.3292991518974304, 1.620657730102539, 0.21700386703014374, 1.6321902751922608, 0.10358666628599167, 1.6355436325073243, -0.010365975089371204, 1.5765121459960938, -0.12000507116317749, 1.563943910598755, -0.22937916219234467, 1.543549108505249, -0.3375675082206726, 1.4668076515197754, -0.4292776882648468, 1.4323007345199585, -0.5299697518348694, 1.3906480550765992, -0.6279221773147583, 1.3005205869674683, -0.699393630027771, 1.2470348358154297, -0.7874394059181213]],
            [1427452005.95, 'L', 1.6, [6.427411365509033, 2.885934829711914, 1.486787247657776, 0.5294179320335388, 1.521113681793213, 0.4248121678829193, 1.5478351593017579, 0.3180103600025177, 1.620657730102539, 0.21700386703014374, 1.6321902751922608, 0.10358666628599167, 1.6355436325073243, -0.010365975089371204, 1.6102017641067505, -0.12265354245901108, 1.6196309208869935, -0.23781635612249374, 1.6534228801727295, -0.3624008595943451, 1.6232388496398926, -0.4766746759414673, 1.530495572090149, -0.5676173567771912, 1.48588387966156, -0.6725280284881592, 1.4338493824005127, -0.7739620208740234, 1.365578818321228, -0.8654206037521363]],
            [1427452143.25, 'L', 1.7, [6.427411365509033, 2.885934829711914, 1.537790584564209, 0.5482113361358643, 1.6293368816375733, 0.4560636878013611, 1.719326663017273, 0.3544203042984009, 1.740477967262268, 0.23355837166309357, 1.6903552293777466, 0.1073947548866272, 1.7564995765686036, -0.011156761087477207, 1.751287031173706, -0.13374480605125427, 1.7372797012329102, -0.2556414306163788, 1.7145499467849732, -0.3762165904045105, 1.6832153081893921, -0.4948468804359436, 1.5849220037460328, -0.5884842872619629, 1.5386703491210938, -0.6972517371177673, 1.484722900390625, -0.8024147152900696, 1.3746610164642334, -0.8713951110839844]],
            [1427452724.43, 'L', 1.8, [6.427411365509033, 2.885934829711914, 1.537790584564209, 0.5482113361358643, 1.6293368816375733, 0.4560636878013611, 1.719326663017273, 0.3544203042984009, 1.740477967262268, 0.23355837166309357, 1.6903552293777466, 0.1073947548866272, 1.7564995765686036, -0.011156761087477207, 1.751287031173706, -0.13374480605125427, 1.8040814876556397, -0.26576265692710876, 1.7804518222808838, -0.3911115527153015, 1.6832153081893921, -0.4948468804359436, 1.643437671661377, -0.6109189987182617, 1.5954226732254029, -0.7238329648971558, 1.539418625831604, -0.8330050706863403, 1.4233587265014649, -0.9034296274185181]],
            [1427453111.82, 'L', 1.9, [6.427411365509033, 2.885934829711914, 1.592485237121582, 0.5683648586273193, 1.6293368816375733, 0.4560636878013611, 1.719326663017273, 0.3544203042984009, 1.740477967262268, 0.23355837166309357, 1.8203100442886353, 0.11590295284986496, 1.8971194505691529, -0.01207610685378313, 1.8186433792114258, -0.13903994858264923, 1.9546772718429566, -0.2885795831680298, 1.9290189027786255, -0.42469024658203125, 1.8936468839645386, -0.558605432510376, 1.774740982055664, -0.6612602472305298, 1.722769546508789, -0.7834786772727966, 1.598386812210083, -0.8659848570823669, 1.532161045074463, -0.9750025272369385]],
            [1427453670.86, 'L', 2.0, [6.427411365509033, 2.885934829711914, 1.592485237121582, 0.5683648586273193, 1.6895457983016968, 0.4734501540660858, 1.7854176044464112, 0.3684522807598114, 1.8074063539505005, 0.24280527234077454, 1.8932128429412842, 0.12067592889070511, 1.9763734817504883, -0.012594254687428474, 1.9704894304275513, -0.15097714960575104, 2.0399830818176268, -0.30150434374809265, 2.013175535202026, -0.4437110722064972, 1.9762193441390992, -0.583624005317688, 1.8487440824508667, -0.6896328330039978, 1.7945427179336548, -0.8170952200889587, 1.7313228130340577, -0.9403336048126221, 1.5931976318359375, -1.0151538848876953]],
            [1427454267.47, 'L', 2.2, [6.427411365509033, 2.885934829711914, 1.7146864414215088, 0.6133927702903748, 1.8246485471725464, 0.5124636292457581, 1.934411096572876, 0.40008559823036194, 2.043755221366882, 0.27545949816703796, 2.152476358413696, 0.1376500278711319, 2.062650966644287, -0.01315832044929266, 2.150497007369995, -0.16512824594974518, 2.133202838897705, -0.31562814116477966, 2.1051395416259764, -0.4644964933395386, 2.066452074050903, -0.6109635233879089, 2.113944339752197, -0.7913097739219666, 1.958058762550354, -0.8936815857887268, 1.8066251754760743, -0.9824488162994385, 1.7314929246902466, -1.1061279773712158]],
            [1427455653.79, 'L', 2.4, [6.427411365509033, 2.885934829711914, 1.7832395315170289, 0.6386527419090271, 1.9007930040359498, 0.5344518423080444, 2.0188092470169066, 0.41800445318222046, 2.137151527404785, 0.2883632481098175, 2.2557158946990965, 0.1444091647863388, 2.363033819198608, -0.015122164506465197, 2.367338705062866, -0.18217501044273376, 2.3482592582702635, -0.3482115566730499, 2.440548229217529, -0.5403045415878296, 2.395546722412109, -0.7106757760047913, 2.220435905456543, -0.8321383595466614, 2.1550343513488768, -0.9859395027160645, 1.979210901260376, -1.0789729356765747, 1.4757150888442994, -0.9378709197044373]],
            [1427458267.16, 'L', 2.6, [6.427411365509033, 2.885934829711914, 1.7832395315170289, 0.6386527419090271, 1.9836855411529541, 0.5583886504173279, 2.0188092470169066, 0.41800445318222046, 2.208892488479614, 0.2982750654220581, 2.346761083602905, 0.15036992728710175, 2.3744385719299315, -0.015196726657450199, 2.493308353424072, -0.19207797944545746, 2.4731915473937987, -0.3671402037143707, 2.577863025665283, -0.5713400840759277, 2.530276823043823, -0.7514975070953369, 2.338419961929321, -0.8773730397224426, 2.2694633483886717, -1.0395348072052002, 2.1890328407287596, -1.1963225603103638, 1.9919795274734498, -1.2774826288223267]],
            [1427460327.31, 'L', 2.8, [6.427411365509033, 2.885934829711914, 2.1241143226623533, 0.7642560601234436, 2.173667240142822, 0.6132494807243347, 2.3238051414489744, 0.48275914788246155, 2.4777849197387694, 0.3354255259037018, 2.495610761642456, 0.16011518239974976, 2.7993894100189207, -0.01797497272491455, 2.633653688430786, -0.20311108231544495, 2.944583463668823, -0.43856123089790344, 2.9055896282196043, -0.6454118490219116, 2.8518341064453123, -0.8489259481430054, 2.6172321319580076, -0.9842687845230103, 2.3969510078430174, -1.0992465019226074, 2.3119006633758543, -1.2650402784347534, 1.9919795274734498, -1.2774826288223267]],
            [1427463842.23, 'L', 3.1, [6.427411365509033, 2.885934829711914, 2.2311306476593016, 0.8036887645721436, 2.2832403659820555, 0.6448907852172852, 2.4474082469940184, 0.5090017318725586, 2.6172388076782225, 0.35469263792037964, 2.7935746192932127, 0.17962299287319183, 2.9775555610656737, -0.019139787182211876, 3.170720863342285, -0.2453320324420929, 3.145026969909668, -0.4689306318759918, 3.103333044052124, -0.6901051998138428, 3.04585485458374, -0.9077122211456299, 2.783594179153442, -1.0480514764785767, 2.7012229442596434, -1.2417590618133545, 2.449644374847412, -1.3420778512954712, 2.215157318115234, -1.4242944717407227]],
            [1427466456.54, 'L', 3.4, [6.427411365509033, 2.885934829711914, 2.2311306476593016, 0.8036887645721436, 2.2832403659820555, 0.6448907852172852, 2.5851173877716063, 0.5382391810417175, 2.773576784133911, 0.37629246711730957, 2.971363830566406, 0.19126293063163757, 3.180282402038574, -0.020465176552534103, 3.40276198387146, -0.26357367634773254, 3.3751574039459227, -0.5037979483604431, 3.330363321304321, -0.7414179444313049, 3.268611478805542, -0.9752050638198853, 2.972889709472656, -1.12062668800354, 2.8848143100738524, -1.3277480602264404, 2.6051462173461912, -1.4290473461151123, 2.347009706497192, -1.5110303163528442]],
            
            [1427467656.81, 'R', 0.6, [0.513918936252594, 0.31913501024246216, 0.5355213284492493, 0.28138357400894165, 0.5376256346702576, 0.23486888110637666, 0.5383082032203674, 0.19039590656757355, 0.542919933795929, 0.1491161286830902, 0.544613242149353, 0.10820677876472473, 0.5509805083274841, 0.0687950998544693, 0.5544994473457336, 0.029027733951807022, 0.5551519393920898, -0.010889667086303234, 0.5606688261032104, -0.05146065726876259, 0.5555220246315002, -0.09161332249641418, 0.5623910963535309, -0.13486245572566985, 0.5600085854530334, -0.17770346999168396, 0.5703926086425781, -0.2272847592830658, 0.5695789456367493, -0.27591267228126526]],
            [1427467948.53, 'R', 0.6, [0.5725801587104797, 0.35556262731552124, 0.58728888630867, 0.3085842430591583, 0.598254919052124, 0.26135560870170593, 0.6059441566467285, 0.21431826055049896, 0.6102882623672485, 0.1676192432641983, 0.6113684773445129, 0.12147007882595062, 0.618516206741333, 0.07722757011651993, 0.6131685972213745, 0.032099030911922455, 0.6138901710510254, -0.012041854672133923, 0.6207097768783569, -0.056971486657857895, 0.6244540810585022, -0.10298117995262146, 0.6154404878616333, -0.14758379757404327, 0.6222737431526184, -0.19746161997318268, 0.6261207461357117, -0.24949076771736145, 0.6165207624435425, -0.2986519932746887]],
            [1427468117.45, 'R', 0.7, [0.6448513865470886, 0.40044182538986206, 0.684175968170166, 0.3594924509525299, 0.6833577156066895, 0.2985338866710663, 0.6908640265464783, 0.24435384571552277, 0.6945757269859314, 0.1907692700624466, 0.6946038603782654, 0.1380077600479126, 0.7027247548103333, 0.08774179965257645, 0.7072128653526306, 0.037022195756435394, 0.7080450654029846, -0.013888765126466751, 0.7172824144363403, -0.06583534926176071, 0.7106979489326477, -0.11720399558544159, 0.7126014828681946, -0.1708831787109375, 0.7107932567596436, -0.22555087506771088, 0.7051498293876648, -0.28098157048225403, 0.708411693572998, -0.3431653380393982]],
            [1427468287.82, 'R', 0.8, [0.7362874746322632, 0.4572221338748932, 0.7672370672225952, 0.4031359553337097, 0.7634572982788086, 0.33352646231651306, 0.7704799771308899, 0.2725134491920471, 0.7896004736423492, 0.2168683722615242, 0.8015848398208618, 0.15926331281661987, 0.7957583069801331, 0.09935791790485382, 0.8008406162261963, 0.041923556476831436, 0.8017829656600952, -0.015727495774626732, 0.8138325214385986, -0.07469714432954788, 0.8063617944717407, -0.13298030197620392, 0.7947224974632263, -0.1905759572982788, 0.7941086888313293, -0.2519887685775757, 0.7892512083053589, -0.31449347734451294, 0.780002772808075, -0.3778451681137085]],
            [1427468514.84, 'R', 0.9, [0.8004042506217957, 0.4970375597476959, 0.8340489864349365, 0.43824151158332825, 0.8274258375167847, 0.361471951007843, 0.8338461518287659, 0.29492563009262085, 0.8706934452056885, 0.239141047000885, 0.867509126663208, 0.17236152291297913, 0.8776515126228333, 0.1095830500125885, 0.8655162453651428, 0.045309290289878845, 0.8665347099304199, -0.016997642815113068, 0.8807641267776489, -0.08084042370319366, 0.8726789355278015, -0.14391691982746124, 0.8600824475288391, -0.2062493860721588, 0.8430397510528564, -0.2675156891345978, 0.84058318734169, -0.3349477916955948, 0.8299114108085632, -0.4020216464996338]],
            [1427468695.39, 'R', 1.0, [0.8761301636695862, 0.544062077999115, 0.8919181227684021, 0.46864819526672363, 0.9232864379882812, 0.40334993600845337, 0.9284475445747375, 0.32838550209999084, 0.9496431946754456, 0.2608250379562378, 0.9882292151451111, 0.19634686410427094, 0.9642613172531128, 0.12039709985256195, 0.9617236852645874, 0.05034569278359413, 0.962855339050293, -0.01888703554868698, 0.9806884527206421, -0.09001190960407257, 0.9502061009407043, -0.15670223534107208, 0.9576603770256042, -0.22964875400066376, 0.9386841058731079, -0.2978658378124237, 0.933863741159439, -0.3721173405647278, 0.9067583680152893, -0.4392474591732025]],
            [1427468864.93, 'R', 1.1, [0.9426131844520569, 0.5853468775749207, 0.9822356104850769, 0.5161044597625732, 0.9917364716529846, 0.4332532286643982, 1.02030348777771, 0.36087432503700256, 1.0435961484909058, 0.2866297960281372, 1.0725904822349548, 0.21310822963714598, 1.0739041566848755, 0.13408704102039337, 1.054741382598877, 0.05521512031555176, 1.0559825897216797, -0.02071378566324711, 1.077712893486023, -0.09891724586486816, 1.0421098470687866, -0.17185844480991364, 1.02706778049469, -0.24629278481006622, 1.0067161321640015, -0.3194539546966553, 1.005366563796997, -0.4006091356277466, 0.9739829897880554, -0.47181209921836853]],
            [1427469001.20, 'R', 1.2, [0.9926281571388245, 0.6164053678512573, 1.0343528985977173, 0.5434889197349548, 1.09984290599823, 0.48048093914985657, 1.10157310962677, 0.38961881399154663, 1.1573556661605835, 0.3178744912147522, 1.146044373512268, 0.22770245373249054, 1.1594432592391968, 0.1447674036026001, 1.1668483018875122, 0.061083849519491196, 1.168221354484558, -0.022915422916412354, 1.1335066556930542, -0.10403824597597122, 1.1231013536453247, -0.1852150708436966, 1.1068902015686035, -0.2654343545436859, 1.0849570035934448, -0.34428152441978455, 1.0574150085449219, -0.42134889960289, 1.051563024520874, -0.509393036365509]],
            [1427469189.87, 'R', 1.3, [1.0781148672103882, 0.669491171836853, 1.1234331130981445, 0.5902950763702393, 1.162943720817566, 0.5080474019050598, 1.163101077079773, 0.4113808274269104, 1.223756194114685, 0.33611178398132324, 1.2447435855865479, 0.24731257557868958, 1.2592964172363281, 0.1572350114583969, 1.2673391103744507, 0.0663444921374321, 1.2334718704223633, -0.0241953544318676, 1.2285451889038086, -0.11276130378246307, 1.2172675132751465, -0.2007443755865097, 1.1671264171600342, -0.279879093170166, 1.1727322459220886, -0.3721346348524094, 1.1149587631225586, -0.44427838921546936, 1.1102977991104126, -0.5378450155258179]],
            [1427469431.45, 'R', 1.4, [1.1435409784317017, 0.7101196646690369, 1.1565403938293457, 0.6076909303665161, 1.1972153186798096, 0.5230193734169006, 1.2690492868423462, 0.4488539695739746, 1.298020601272583, 0.35650891065597534, 1.3615120649337769, 0.27051275968551636, 1.3082004904747009, 0.1633411467075348, 1.304687261581421, 0.06829964369535446, 1.3062225580215454, -0.025622406974434853, 1.3404546976089478, -0.12303285300731659, 1.2890623807907104, -0.21258436143398285, 1.2704557180404663, -0.3046576678752899, 1.209633708000183, -0.3838443160057068, 1.1789268255233765, -0.46976780891418457, 1.1421253681182861, -0.5532628297805786]],
            [1427469650.77, 'R', 1.5, [1.179252028465271, 0.7322956323623657, 1.2683806419372559, 0.6664561033248901, 1.3129889965057373, 0.5735966563224792, 1.3956856727600098, 0.4936443865299225, 1.3816475868225098, 0.3794775903224945, 1.405342936515808, 0.2792213261127472, 1.4217733144760132, 0.17752178013324738, 1.4308537244796753, 0.07490438967943192, 1.4325374364852905, -0.028100155293941498, 1.3823150396347046, -0.12687498331069946, 1.3696258068084717, -0.22587038576602936, 1.3498561382293701, -0.3236980736255646, 1.3231085538864136, -0.41985243558883667, 1.2504706382751465, -0.4982759356498718, 1.2114359140396118, -0.5868379473686218]],
            [1427469886.51, 'R', 1.6, [1.2590160369873047, 0.7818276882171631, 1.333007037639618, 0.7004133462905884, 1.3566083908081055, 0.5926523804664612, 1.4435864686965942, 0.5105866193771362, 1.4275479316711426, 0.39208438992500305, 1.5018651485443115, 0.29839888215065, 1.5194239616394043, 0.18971438705921173, 1.4834627151489257, 0.07765844091773033, 1.4801284074783325, -0.029033683240413666, 1.4742165803909302, -0.135310098528862, 1.4606835842132568, -0.2408870905637741, 1.393311858177185, -0.3341188132762909, 1.3465355575084685, -0.42728635519742963, 1.3102776408195496, -0.5221072435379028, 1.2693759202957153, -0.6149049401283264]],
            [1427470104.49, 'R', 1.7, [1.3008166551589966, 0.807785153388977, 1.4036136865615845, 0.7375127673149109, 1.4796854853630066, 0.6464202404022217, 1.4948312044143677, 0.5287114977836609, 1.585165023803711, 0.43537482619285583, 1.612350583076477, 0.3203507661819458, 1.631201148033142, 0.20367081463336945, 1.6416192054748535, 0.08593784272670746, 1.5852726697921753, -0.03109615482389927, 1.578940749168396, -0.1449221521615982, 1.5108152627944946, -0.24915450811386108, 1.4890077114105225, -0.3570668697357178, 1.4110736846923828, -0.4477657973766327, 1.3531437516212463, -0.5391881465911865, 1.3323231935501099, -0.6453975439071655]],
            [1427470340.25, 'R', 1.8, [1.1435409784317017, 0.7101196646690369, 1.4552137851715088, 0.7646254301071167, 1.5638209581375122, 0.6831759214401245, 1.5497846603393555, 0.5481481552124023, 1.6455960273742676, 0.4519725441932678, 1.6738179922103882, 0.33256345987319946, 1.6933872699737549, 0.21143533289432526, 1.70420241355896, 0.08921404182910919, 1.7062078714370728, -0.033468376845121384, 1.6369863748550415, -0.15024983882904053, 1.5644465684890747, -0.2579990327358246, 1.5418648719787598, -0.36974209547042847, 1.511312484741211, -0.4795738160610199, 1.4224528074264526, -0.5668057799339294, 1.3780494928359985, -0.6675480008125305]],
            [1427470925.23, 'R', 1.9, [1.187092137336731, 0.7371642053127289, 1.4552137851715088, 0.7646254301071167, 1.5638209581375122, 0.6831759214401245, 1.6725642681121826, 0.5915744304656982, 1.7811973094940186, 0.48921623826026917, 1.7400867938995361, 0.34573009610176086, 1.7604308128356934, 0.21980635821819305, 1.7716741561889648, 0.09274614602327347, 1.7062078714370728, -0.033468376845121384, 1.6993929147720337, -0.1559777855873108, 1.6837929487228394, -0.2776809334754944, 1.598547339439392, -0.3833346664905548, 1.5668717622756958, -0.497204065322876, 1.4729472398757935, -0.5869263410568237, 1.426967740058899, -0.6912447810173035]],
            [1427471143.31, 'R', 2.1, [1.3469932079315186, 0.8364601135253906, 1.3554959297180176, 0.7122299075126648, 1.4529780149459839, 0.6347527503967285, 1.8161613941192627, 0.6423637866973877, 1.8576228618621826, 0.510206937789917, 1.9741063117980957, 0.3922263979911804, 1.9971864223480225, 0.24936752021312714, 1.9237804412841797, 0.10070882737636566, 1.926044225692749, -0.03778061270713806, 1.8394273519515991, -0.1688307523727417, 1.750456690788269, -0.2886747121810913, 1.7251900434494019, -0.4137038290500641, 1.6266053915023804, -0.516158938407898, 1.5853135585784912, -0.6317009925842285, 1.479426383972168, -0.716656506061554]],
            [1427471495.53, 'R', 2.3, [1.4497509002685547, 0.9002708792686462, 1.4552137851715088, 0.7646254301071167, 1.5063929557800293, 0.6580877304077148, 1.816857099533081, 0.6426098346710205, 2.1315040588378906, 0.5854300260543823, 2.066582202911377, 0.41060003638267517, 2.0907435417175293, 0.2610490024089813, 2.1040964126586914, 0.11014826595783234, 2.106572389602661, -0.04132179170846939, 2.004269599914551, -0.1839607059955597, 1.9858708381652832, -0.32749778032302856, 1.8733054399490356, -0.4492221772670746, 1.7606419324874878, -0.5586917400360107, 1.6480783224105835, -0.6567109227180481, 1.5966318845748901, -0.7734326124191284]],
            [1427472457.47, 'R', 2.5, [1.5431475043296814, 0.95826855301857, 1.5802747011184692, 0.8303372859954834, 1.9781783819198608, 0.864193469285965, 1.9126856327056885, 0.6765037178993225, 1.9761143922805786, 0.542751356959343, 2.2799229621887207, 0.4529877305030823, 2.3065783977508545, 0.2879980206489563, 2.321309804916382, 0.12151926010847092, 2.3240413665771484, -0.045587584376335144, 2.201185941696167, -0.20203456282615662, 2.0788979530334473, -0.34283924102783203, 1.957206130027771, -0.4693417251110077, 1.9184236526489258, -0.6087595224380493, 1.752760410308838, -0.6984236836433411, 1.6623823642730713, -0.8052831888198853]],
        ];
        return laser_txt;
        
    # getDefaultPepperMeasures - end
    
    def _printWithBias( self, measures, rDistBias = 0.05 ):
        """
        get a lot of measures and print them with a bias (when someone silly has forget something...)
        """
        print( "INF: _printWithBias: measures with a bias of %s:\n\n" % rDistBias );
        for mes in measures:
            rTime, strSide, rTheoricDist, values = mes;
            for i in range( 0, len(values), 2 ):
                values[i] += rDistBias;
            print( "[%s, '%s', %s, %s]," % (rTime, strSide, rTheoricDist, values) );
        
    # _printWithBias - end
        
            
    def loadDefaultPepper( self ):
        """
        load default pepper measures
        """
        self.reset();
        self.generateUndistortMap( self.getDefaultPepperMeasures() );
    # loadDefaultPepper - end
        


    def generateUndistortMap( self, measures ):
        """
        take a list of laser measure and fill the table of undistortion: daLaserUndistort
        - measures: an array of [time, side, theoric dist, measures] with:
            - time: time of measurement
            - side: F / L / R
            - theoric: distance in m
            - measures: list of x1,y1,x2,y2,...
        """
        print( "INF: generateUndistortMap: generating table..." );
        for mes in measures:
            rTime, strSide, rTheoricDist, values = mes;
            #~ print( "INF: generateUndistortMap: strSide: %s" % strSide );
            #~ print( "INF: generateUndistortMap: rTheoricDist: %s" % rTheoricDist );
            assert( len(values)/2 == self.nNbrLaser );
            for i in range( self.nNbrLaser ):
                self.daLaserUndistort[strSide][i][int(round(rTheoricDist/self.rPrecision))] = values[i*2];
                
        # check and cleaning
        if( 1 ):
            for side in self.listSide:
                print( "INF: generateUndistortMap: checking table for side: %s ..." % side );        
                for nNumLaser in range(len(self.daLaserUndistort[side]) ):
                    # check ordering:
                    rValPrev = 0.;
                    for i in range( len(self.daLaserUndistort[side][nNumLaser] ) ):
                        rVal = self.daLaserUndistort[side][nNumLaser][i];
                        if( rVal > 0. ):
                            if( rVal < rValPrev ):
                                print( "WRN: generateUndistortMap: " );
                                print( "WRN: generateUndistortMap: side %s, table isn't well ordered ! nNumLaser: %d, i: %d, rVal: %s, rValPrev: %s" % (side, nNumLaser,i,rVal,rValPrev) );
                                print( "WRN: generateUndistortMap: => splashing this last one" );
                                print( "WRN: generateUndistortMap: " );
                                #~ assert( 0 );
                                self.daLaserUndistort[side][nNumLaser][i] = rValPrev;
                            rValPrev = rVal;                    
                    
                    # check hit ground
                    rFarValue = 0.;
                    nIdxNearestFarValue = 0;            
                    for i in range( len(self.daLaserUndistort[side][nNumLaser] )-1, 1, -1 ):                
                        rVal = self.daLaserUndistort[side][nNumLaser][i];
                        if( rVal > 0. ):
                            if( rFarValue == 0. ):
                                rFarValue = rVal;
                                nIdxNearestFarValue = i;
                                #~ print( "new rFarValue: %f" % rFarValue );
                            else:
                                if( abs(rFarValue-rVal) > 0.001 ):
                                    if( nIdxNearestFarValue != 0 ):
                                        # first changing value
                                        print( "INF: generateUndistortMap: side: %s, nNumLaser %d first hit ground dist: %f" % (side,nNumLaser, nIdxNearestFarValue*self.rPrecision ) );
                                        for i in range( nIdxNearestFarValue+1,  len(self.daLaserUndistort[side][nNumLaser] ) ):
                                            self.daLaserUndistort[side][nNumLaser][i] = 0.; # remove hit ground
                                        break;
                                #~ print( "store idx: %d" % i );
                                nIdxNearestFarValue = i;
                            
    # generateUndistortMap - end
                
    def __str__( self ):
        strOut = "";
        strOut += "rDistMax: %s\n" % self.rDistMax;
        strOut += "rPrecision: %s\n" % self.rPrecision;
        strOut += "nNbrLaser: %s\n" % self.nNbrLaser;
        for side in self.listSide:
            for i in range( len(self.daLaserUndistort[side]) ):
                strOut += "side: %s, laser %d:\n" % (side,i);
                for j in range( len(self.daLaserUndistort[side][i]) ):
                    rVal = self.daLaserUndistort[side][i][j];
                    if( rVal > 0. ):
                        strOut += "  at %5.2fm: %s\n" % (j/10., rVal );
                
        return strOut;
        
    def undistort( self, scan, strSide = "F", bChangeY = 1, bDebug = 0 ):
        """
        undistort one scan
        """
        out = scan[:]
        if(bDebug): print( "INF: undistort: scan: %s" % scan );
        for i in range( len(scan)/2 ):
            rVal = scan[i*2]
            if(bDebug): print( "looking for %s" % rVal );            
            table = self.daLaserUndistort[strSide][i];
            nIdxLastNotZero = 0;
            for j in range( len(table) ):
                if( table[j] != 0. ):
                    if( table[j] > rVal ):
                        break;
                    nIdxLastNotZero = j;                        
            else:
                if(bDebug): print( "WRN: last value for laser %d, rVal: %s, no interpolation" % ( i, rVal ) );                
                j = nIdxLastNotZero;
            if(bDebug): print( "i: %d, rVal: %5.3f is between %d: %5.3f and %d: %5.3f" % (i*2, rVal, nIdxLastNotZero, table[nIdxLastNotZero], j, table[j] ));            
            if( table[j] <= rVal ):
                if( 0 ):
                    if(bDebug): print( "i: %d, out of range => no change" % (i*2));
                    rNewVal = rVal;
                if( 1 ):
                    if(bDebug): print( "i: %d, out of range => set to out of range" % (i*2));
                    rNewVal = 7.; # out of range!
            else:
                if( table[j] - table[nIdxLastNotZero] < 0.001 ):
                    rNewVal = nIdxLastNotZero * self.rPrecision;
                else:
                    rPosInInterval = ( rVal - table[nIdxLastNotZero] ) / ( table[j] - table[nIdxLastNotZero] );
                    #~ rNewVal = ( nIdxLastNotZero + rPosInInterval ) * self.rPrecision*(j-nIdxLastNotZero) # should work, but ...
                    rNewVal = ( nIdxLastNotZero*(1.-rPosInInterval) + j * rPosInInterval ) * self.rPrecision
                    if(bDebug): print( "DBG: rPosInInterval: %s" % rPosInInterval );
                if(bDebug): print( "DBG: rNewVal: %s" % rNewVal );
            out[i*2] = rNewVal;
            if( bChangeY ):
                #~ out[i*2+1] = math.tan((7-i)*self.rLaserAperture/7) * rVal;
                out[i*2+1] = (rNewVal*out[i*2+1])/rVal;
        if(bDebug): print( "INF: undistort: results: %s" % out );
        return out;
    # undistort - end
        
# class Undistorter - end
        
undistorter = Undistorter();
undistorter.loadDefaultPepper();
print( "undistorter:\n%s" % str(undistorter) );

def autoTest():
    ls = LaserScan();
    print( "LaserScan dump:\n%s" % str( ls ) );
    
    scan = baseLaserScan.get_laser_scan( "Front" ) # wont't work on a computer: you need a ALMemory somewhere...
    undistorter.undistort( scan, "Front" )
# autoTest - end

if __name__ == "__main__":
    autoTest();